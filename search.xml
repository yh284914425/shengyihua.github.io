<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>css学习</title>
      <link href="/2018/09/11/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/11/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>@<a href="css基础">TOC</a></p><h1 id="属性-Properties"><a href="#属性-Properties" class="headerlink" title="属性 Properties"></a>属性 Properties</h1><h2 id="字体-Font"><a href="#字体-Font" class="headerlink" title="字体(Font)"></a>字体(Font)</h2><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><p><strong>实例</strong><br>在一个声明中设置所有字体属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.ex1</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">font</span>:italic arial,sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.ex2</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">font</span>:italic bold <span class="number">12px</span>/<span class="number">20px</span> arial,sans-serif;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>font 简写属性在一个声明中设置所有字体属性。</p><p>注释：此属性也有第六个值：”line-height”，可设置行间距。</p><p><strong>说明</strong><br>这个简写属性用于一次设置元素字体的两个或更多方面。使用 icon 等关键字可以适当地设置元素的字体，使之与用户计算机环境中的某个方面一致。注意，如果没有使用这些关键词，至少要指定字体大小和字体系列。</p><p>可以按顺序设置如下属性：</p><p>font-style<br>font-variant<br>font-weight<br>font-size/line-height<br>font-family<br>可以不设置其中的某个值，比如 font:100% verdana; 也是允许的。未设置的属性会使用其默认值。参数<font color="blue">必须按照如上的排列顺序</font>，且 &lt;’ font-size ‘&gt; 和 &lt;’ font-family ‘&gt; 是<font color="blue">不可忽略</font>的。每个参数仅允许有一个值。</p><p>默认值：    not specified<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.font=”italic small-caps bold 12px arial,sans-serif”</p><h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><p><strong>实例</strong><br>为三个段落设置不同的字体样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.italic</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.oblique</span> &#123;<span class="attribute">font-style</span>:oblique;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>font-style 属性定义字体的风格。</p><p><strong>说明</strong><br>该属性设置使用斜体、倾斜或正常字体。斜体字体通常定义为字体系列中的一个单独的字体。理论上讲，用户代理可以根据正常字体计算一个斜体字体。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.fontStyle=”italic”</p><p><strong>可能的值</strong><br>normal    默认值。浏览器显示一个标准的字体样式。<br>italic    浏览器会显示一个斜体的字体样式。<br>oblique    浏览器会显示一个倾斜的字体样式。<br>inherit    规定应该从父元素继承字体样式。</p><p><strong>ps</strong><br>italic和oblique都是向右倾斜的文字, 但区别在于Italic是指斜体字，而Oblique是倾斜的文字，对于没有斜体的字体应该使用Oblique属性值来实现倾斜的文字效果.</p><h3 id="font-variant"><a href="#font-variant" class="headerlink" title="font-variant"></a>font-variant</h3><p><strong>实例</strong><br>把段落设置为小型大写字母字体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.small</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">font-variant</span>:small-caps;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>font-variant 属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</p><p><strong>说明</strong><br>该属性主要用于定义小型大写字母文本。理论上，用户代理可以根据正常字体计算出小型大写字母字体。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.fontVariant=”small-caps”</p><p><strong>可能的值</strong><br>normal    默认值。浏览器会显示一个标准的字体。<br>small-caps    浏览器会显示小型大写字母的字体。<br>inherit    规定应该从父元素继承 font-variant 属性的值。</p><p><strong>效果图</strong><br><img src="http://shengyihua.top/css/180930/60La706BJ1.png?imageslim" alt="mark"></p><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p><strong>实例</strong><br>设置三个段落的字体的粗细：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thicker</span> &#123;<span class="attribute">font-weight</span>:<span class="number">900</span>;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>font-weight 属性设置文本的粗细。</p><p><strong>说明</strong><br>该属性用于设置显示元素的文本中所用的字体加粗。数字值 400 相当于 关键字 normal，700 等价于 bold。每个数字值对应的字体加粗必须至少与下一个最小数字一样细，而且至少与下一个最大数字一样粗。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.fontWeight=”900”</p><p><strong>可能的值</strong><br>normal    默认值。定义标准的字符。<br>bold    定义粗体字符。<br>bolder    定义更粗的字符。<br>lighter    定义更细的字符。<br>100 200 300 400 500 600 700 800 900 定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold。<br>inherit    规定应该从父元素继承字体的粗细。</p><h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><p><strong>实例</strong><br>设置不同的 HTML 元素的尺寸：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">font-size</span>:<span class="number">250%</span>;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">font-size</span>:<span class="number">200%</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">100%</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>font-size 属性可设置字体的尺寸。</p><p><strong>说明</strong><br>该属性设置元素的字体大小。注意，实际上它设置的是字体中字符框的高度；实际的字符字形可能比这些框高或矮（通常会矮）。</p><p>各关键字对应的字体必须比一个最小关键字相应字体要高，并且要小于下一个最大关键字对应的字体。</p><p>默认值：    medium<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.fontSize=”larger”</p><p><strong>可能的值</strong><br>smaller    把 font-size 设置为比父元素更小的尺寸。<br>larger    把 font-size 设置为比父元素更大的尺寸。<br>length    把 font-size 设置为一个固定的值。<br>%    把 font-size 设置为基于父元素的一个百分比值。<br>inherit    规定应该从父元素继承字体尺寸。</p><h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><p><strong>实例</strong><br>为段落设置字体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">"Times New Roman"</span>,Georgia,Serif;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>font-family 规定元素的字体系列。</p><p>font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。<br>提示：使用逗号分割每个值，并始终提供一个类族名称作为最后的选择。</p><p>注意：使用某种特定的字体系列（Geneva）完全取决于用户机器上该字体系列是否可用；这个属性没有指示任何字体下载。因此，强烈推荐使用一个通用字体系列名作为后路。</p><p>默认值：    not specified<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.fontFamily=”arial,sans-serif”</p><p><strong>字体使用注意：</strong></p><ol><li>现在网页中普遍使用14px+。</li><li>尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</li><li>各种字体之间必须使用英文状态下的逗号隔开。</li><li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”;。</li><li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li></ol><h2 id="颜色-Color"><a href="#颜色-Color" class="headerlink" title="颜色(Color)"></a>颜色(Color)</h2><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p><strong>实例</strong><br>为不同元素设置文本颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#00ff00</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="built_in">rgb</span>(0,0,255);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义和用法</strong><br>color 属性规定文本的颜色。</p><p>这个属性设置了一个元素的前景色（在 HTML 表现中，就是元素文本的颜色）；光栅图像不受 color 影响。这个颜色还会应用到元素的所有边框，除非被 border-color 或另外某个边框颜色属性覆盖。</p><p>要设置一个元素的前景色，最容易的方法是使用 color 属性。</p><p>默认值：    not specified<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.color=”#FF0000”<br>提示和注释<br>提示：请使用合理的背景颜色和文本颜色搭配，这样可以提高文本的可读性。</p><p><strong>可能的值</strong><br>color_name    规定颜色值为颜色名称的颜色（比如 red）。<br>hex_number    规定颜色值为十六进制值的颜色（比如 #ff0000）。<br>rgb_number    规定颜色值为 rgb 代码的颜色（比如 rgb(255,0,0)）。也可以用rgba，例如rgba(20,34,56,.4)，最后一个数字代表透明度<br>inherit    规定应该从父元素继承颜色。</p><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity "></a><font color="orange">opacity </font></h3><p><strong>实例</strong><br>设置 div 元素的不透明级别：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">opacity</span>:<span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>浏览器支持</strong><br>所有浏览器都支持 opacity 属性。</p><p>注释：IE8 以及更早的版本支持替代的 filter 属性。例如：filter:Alpha(opacity=50)。</p><p><strong>定义和用法</strong><br>opacity 属性设置元素的不透明级别。</p><p>默认值：    1<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.opacity=0.5</p><p><strong>语法</strong><br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opacity: <span class="keyword">value</span>|<span class="keyword">inherit</span>;</span><br></pre></td></tr></table></figure></p><p><strong>可能的值</strong><br>value    规定不透明度。从 0.0 （完全透明）到 1.0（完全不透明）。<br>inherit    应该从父元素继承 opacity 属性的值。</p><p><strong>注意</strong><br>html结构中父元素设置透明，子元素也受影响。</p><h2 id="尺寸-Dimension"><a href="#尺寸-Dimension" class="headerlink" title="尺寸(Dimension)"></a>尺寸(Dimension)</h2><h3 id="width"><a href="#width" class="headerlink" title="width"></a>width</h3><p><strong>实例</strong><br>设置段落的高度和宽度：</p><pre><code>p  {  height:100px;  width:100px;  }</code></pre><p><strong>定义和用法</strong><br>width 属性设置元素的宽度。</p><p><strong>说明</strong><br>这个属性定义元素内容区的宽度，在内容区外面可以增加内边距、边框和外边距。</p><p>行内非替换元素会忽略这个属性。对于img对象来说，仅指定此属性，其height值将根据图片源尺寸等比例缩放。</p><p>默认值：    auto<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.width=”50px”</p><h3 id="min-width"><a href="#min-width" class="headerlink" title="min-width"></a>min-width</h3><p><strong>实例</strong><br>设置段落的最小宽度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">min-width</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>定义和用法</strong><br>min-width 属性设置元素的最小宽度。</p><p><strong>说明</strong><br>该属性值会对元素的宽度设置一个最小限制。因此，元素可以比指定值宽，但不能比其窄。不允许指定负值。</p><p>默认值：    none<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.minWidth=”50px”</p><h3 id="max-width"><a href="#max-width" class="headerlink" title="max-width"></a>max-width</h3><p><strong>实例</strong><br>设置段落的最大宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">max-width</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>max-width 定义元素的最大宽度。</p><p><strong>说明</strong><br>该属性值会对元素的宽度设置一个最高限制。因此，元素可以比指定值窄，但不能比其宽。不允许指定负值。</p><p>默认值：    none<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.maxWidth=”50px”</p><h3 id="height"><a href="#height" class="headerlink" title="height"></a>height</h3><p><strong>实例</strong><br>设置段落的高度和宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>height 属性设置元素的高度。</p><p><strong>说明</strong><br>这个属性定义元素内容区的高度，在内容区外面可以增加内边距、边框和外边距。</p><p>行内非替换元素会忽略这个属性。</p><p>默认值：    auto<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.height=”50px”</p><h3 id="min-height"><a href="#min-height" class="headerlink" title="min-height"></a>min-height</h3><p><strong>实例</strong><br>设置段落的最小高度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">min-height</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>定义和用法</strong><br>min-height 属性设置元素的最小高度。</p><p><strong>说明</strong><br>该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮。不允许指定负值。</p><p>默认值：    0<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.minHeight=”50px”</p><h3 id="max-height"><a href="#max-height" class="headerlink" title="max-height"></a>max-height</h3><p><strong>实例</strong><br>设置段落的最大高度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">max-height</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>max-height 属性设置元素的最大高度。</p><p><strong>说明</strong><br>该属性值会对元素的高度设置一个最高限制。因此，元素可以比指定值矮，但不能比其高。不允许指定负值。</p><p>注释：max-height 属性不包括外边距、边框和内边距。</p><p>默认值：    none<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.maxHeight=”50px”</p><h3 id="min-width最小宽度与max-width最大宽度的应用"><a href="#min-width最小宽度与max-width最大宽度的应用" class="headerlink" title="min-width最小宽度与max-width最大宽度的应用"></a>min-width最小宽度与max-width最大宽度的应用</h3><p>如下图片尺寸是185<em>60<br><img src="http://shengyihua.top/css/180930/84aH720ieL.png?imageslim" alt="mark"><br>如下图片尺寸是370</em>60<br><img src="http://shengyihua.top/css/180930/4B21KcJCL2.png?imageslim" alt="mark"><br><img src="http://shengyihua.top/css/180930/d4AKk1HlH3.png?imageslim" alt="mark"></p><h3 id="min-height最小高度max-height最大高度的应用"><a href="#min-height最小高度max-height最大高度的应用" class="headerlink" title="min-height最小高度max-height最大高度的应用"></a>min-height最小高度max-height最大高度的应用</h3><p><img src="http://shengyihua.top/css/180930/4eDi80cb8g.png?imageslim" alt="mark"></p><p>往两个div里面都加一些内容</p><p><img src="http://shengyihua.top/css/180930/IbjaAA4L6f.png?imageslim" alt="mark"><br>我们设置2个盒子一个限制最小高度，一个设置限制最大高度，最小高度限制的对象如果内容不多不会超出限制最小高度，此时对象会显示最小高度限制值，如果内容比较多超过了最小高度限制能装下单，此时对象会自动增高。而后者最大高度max-height限制，内容少时候不会有什么区别，但内容多时候，而最大高度限制也装不下时候，内容会超出最大高度限制，但对象本身还是最大高度，这样就出现内容溢出超出对象盒子，我们即可使用css overflow属性隐藏溢出内容。</p><h2 id="文本-Text"><a href="#文本-Text" class="headerlink" title="文本(Text)"></a>文本(Text)</h2><h3 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h3><p><strong>实例</strong><br>设置 h1、h2、h3 元素的文本对齐方式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">text-align</span>:left&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">text-align</span>:right&#125;</span><br></pre></td></tr></table></figure></p><p><strong>定义和用法</strong><br>text-align 属性规定元素中的文本的水平对齐方式。</p><p>该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值 justify；不同用户代理可能会得到不同的结果。</p><p>默认值：    如果 direction 属性是 ltr，则默认值是 left；如果 direction 是 rtl，则为 right。<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.textAlign=”right”</p><p><strong>可能的值</strong><br>left    把文本排列到左边。默认值：由浏览器决定。<br>right    把文本排列到右边。<br>center    把文本排列到中间。<br>justify    实现两端对齐文本效果。<br>inherit    规定应该从父元素继承 text-align 属性的值。</p><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p><strong>实例</strong><br>垂直对齐一幅图像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>:text-top;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>vertical-align 属性设置元素的垂直对齐方式。</p><p><strong>说明</strong><br>该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。</p><p>默认值：    baseline<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.verticalAlign=”bottom”</p><p><strong>可能的值</strong><br>baseline    默认。元素放置在父元素的基线上。<br>sub    垂直对齐文本的下标。<br>super    垂直对齐文本的上标<br>top    把元素的顶端与行中最高元素的顶端对齐<br>text-top    把元素的顶端与父元素字体的顶端对齐<br>middle    把此元素放置在父元素的中部。<br>bottom    把元素的顶端与行中最低的元素的顶端对齐。<br>text-bottom    把元素的底端与父元素字体的底端对齐。<br>%    使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。<br>inherit    规定应该从父元素继承 vertical-align 属性的值。</p><h3 id="word-spacing"><a href="#word-spacing" class="headerlink" title="word-spacing"></a>word-spacing</h3><p><strong>实例</strong><br>规定段落中的字间距是 25 像素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">word-spacing</span>:<span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义</strong><br>word-spacing 属性增加或减少单词间的空白（即字间隔）。</p><p>该属性定义元素中字之间插入多少空白符。针对这个属性，“字” 定义为由空白符包围的一个字符串。如果指定为长度值，会调整字之间的通常间隔；所以，normal 就等同于设置为 0。允许指定负长度值，这会让字之间挤得更紧。允许使用负值。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.wordSpacing=”10px”</p><p><strong>提示和注释</strong><br>注释：CSS 把“字（word）”定义为任何非空白符字符组成的串，并由某种空白字符包围。这个定义没有实际的语义，它只是假设一个文档包含由一个或多个空白字符包围的字。支持 CSS 的用户代理不一定能确定一个给定语言中哪些是合法的字，而哪些不是。尽管这个定义没有多大价值，不过它意味着采用象形文字的语言或非罗马书写体往往无法指定字间隔。</p><p>提示：利用这个属性，可能会创建字间隔太宽的文档，所以，使用 word-spacing 时要小心。</p><p><strong>可能的值</strong><br>normal    默认。定义单词间的标准空间。<br>length    定义单词间的固定空间。<br>inherit    规定应该从父元素继承 word-spacing 属性的值。</p><h3 id="letter-spacing"><a href="#letter-spacing" class="headerlink" title="letter-spacing"></a>letter-spacing</h3><p><strong>实例</strong><br>设置 h1 和 h2 元素的字母间距：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">letter-spacing</span>:<span class="number">2px</span>&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">letter-spacing</span>:-<span class="number">3px</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>letter-spacing 属性增加或减少字符间的空白（字符间距）。</p><p>该属性定义了在文本字符框之间插入多少空间。由于字符字形通常比其字符框要窄，指定长度值时，会调整字母之间通常的间隔。因此，normal 就相当于值为 0。</p><p>注释：允许使用负值，这会让字母之间挤得更紧。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.letterSpacing=”3px”</p><p><strong>可能的值</strong><br>normal    默认。规定字符间没有额外的空间。<br>length    定义字符间的固定空间（允许使用负值）。<br>inherit    规定应该从父元素继承 letter-spacing 属性的值。</p><h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h3><p><strong>实例</strong><br>将段落的第一行缩进 50 像素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">text-indent</span>:<span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义</strong><br>text-indent 属性规定文本块中首行文本的缩进。</p><p>注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。</p><p>默认值：    not specified<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.textIndent=”50px”</p><p><strong>可能的值</strong><br>length    定义固定的缩进。默认值：0。通常都是首行缩进2个字符，也就是2em<br>%    定义基于父元素宽度的百分比的缩进。<br>inherit    规定应该从父元素继承 text-indent 属性的值。</p><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p><strong>实例</strong><br>设置以百分比计的行高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.small</span> &#123;<span class="attribute">line-height</span>:<span class="number">90%</span>&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.big</span> &#123;<span class="attribute">line-height</span>:<span class="number">200%</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>line-height 属性设置行间的距离（行高）。</p><p>注释：不允许使用负值。</p><p>说明<br>该属性会影响行框的布局。在应用到一个块级元素时，它定义了该元素中基线之间的最小距离而不是最大距离。</p><p>line-height 与 font-size 的计算值之差（在 CSS 中成为“行间距”）分为两半，分别加到一个文本行内容的顶部和底部。可以包含这些内容的最小框就是行框。</p><p>原始数字值指定了一个缩放因子，后代元素会继承这个缩放因子而不是计算值。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.lineHeight=”2”</p><p><strong>可能的值</strong><br>normal    默认。设置合理的行间距。<br>number    设置数字，此数字会与当前的字体尺寸相乘来设置行间距。<br>length    设置固定的行间距。<br>%    基于当前字体尺寸的百分比行间距。<br>inherit    规定应该从父元素继承 line-height 属性的值。</p><h3 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h3><p><strong>实例</strong><br>转换不同元素中的文本：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-transform</span>:uppercase&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">text-transform</span>:capitalize&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">text-transform</span>:lowercase&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>text-transform 属性控制文本的大小写。</p><p><strong>说明</strong><br>这个属性会改变元素中的字母大小写，而不论源文档中文本的大小写。如果值为 capitalize，则要对某些字母大写，但是并没有明确定义如何确定哪些字母要大写，这取决于用户代理如何识别出各个“词”。</p><p>默认值：    none<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.textTransform=”uppercase”<br>提示和注释<br>注释：不同的用户代理可能会用不同的方法来确定单词从哪里开始，相应地确定哪些字母要大写。例如，文本 “w3-school” 可以用两种方式显示：”W3-school” 和 “W3-School”。CSS 并没有规定哪一种是正确的，所以这两种都是可以的。</p><p><strong>可能的值</strong><br>none    默认。定义带有小写字母和大写字母的标准的文本。<br>capitalize    文本中的每个单词以大写字母开头。<br>uppercase    定义仅有大写字母。<br>lowercase    定义无大写字母，仅有小写字母。<br>inherit    规定应该从父元素继承 text-transform 属性的值。</p><h3 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h3><p><strong>实例</strong><br>设置 h1、h2、h3、h4 元素的文本修饰：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-decoration</span>:overline&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">text-decoration</span>:line-through&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">text-decoration</span>:underline&#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123;<span class="attribute">text-decoration</span>:blink&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>text-decoration 属性规定添加到文本的修饰。</p><p>注释：修饰的颜色由 “color” 属性设置。</p><p><strong>说明</strong><br>这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。</p><p>默认值：    none<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.textDecoration=”overline”</p><p><strong>可能的值</strong><br>none    默认。定义标准的文本。<br>underline    定义文本下的一条线。<br>overline    定义文本上的一条线。<br>line-through    定义穿过文本下的一条线。<br>blink    定义闪烁的文本。<br>inherit    规定应该从父元素继承 text-decoration 属性的值。</p><h3 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h3><p><strong>实例</strong><br>把文本方向设置为“从右向左”：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">direction</span>: rtl</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>direction 属性规定文本的方向 / 书写方向。</p><p>该属性指定了块的基本书写方向，以及针对 Unicode 双向算法的嵌入和覆盖方向。不支持双向文本的用户代理可以忽略这个属性。</p><p>默认值：    ltr<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.direction=”rtl”</p><p><strong>可能的值</strong><br>ltr    默认。文本方向从左到右。<br>rtl    文本方向从右到左。<br>inherit    规定应该从父元素继承 direction 属性的值。</p><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><p><strong>实例</strong><br>规定段落中的文本不进行换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>white-space 属性设置如何处理元素内的空白。</p><p>这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.whiteSpace=”pre”</p><p><strong>可能的值</strong><br>normal    默认。空白会被浏览器忽略。<br>pre    空白会被浏览器保留。其行为方式类似 HTML 中的pre标签。<br>nowrap    文本不会换行，文本会在在同一行上继续，直到遇到br标签为止。<br>pre-wrap    pre是前缀，所以是先保留文本原模原样，wrap是后缀，所以是在保留基础上，碰到边界会换行。<br>pre-line    pre是前缀，所以是先保留文本原模原样，line是后缀，所以是在保留基础上，把每一行当成一行展示，从左边边界开始，到右边界换行。<br>inherit    规定应该从父元素继承 white-space 属性的值。详情见下图：<br><img src="http://shengyihua.top/css/181001/73Amd3Bl4L.png?imageslim" alt="mark"></p><h3 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a><font color="orange">word-break</font></h3><p><strong>实例</strong><br>在恰当的断字点进行换行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.test</span> &#123;<span class="attribute">word-break</span>:hyphenate;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>word-break 属性规定自动换行的处理方法。</p><p>提示：通过使用 word-break 属性，可以让浏览器实现在任意位置的换行。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS3<br>JavaScript 语法：    object.style.wordBreak=”keep-all”</p><p><strong>语法</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word-<span class="keyword">break</span>: normal|<span class="keyword">break</span>-<span class="built_in">all</span>|keep-<span class="built_in">all</span>;</span><br></pre></td></tr></table></figure><p>normal    使用浏览器默认的换行规则。<br>break-all    允许在单词内换行。<br>keep-all    只能在半角空格或连字符处换行。</p><h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a><font color="orange">word-wrap</font></h3><p><strong>实例</strong><br>允许长单词换行到下一行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.test</span> &#123;<span class="attribute">word-wrap</span>:break-word;&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>word-wrap 属性允许长单词或 URL 地址换行到下一行。</p><p>默认值：    normal<br>继承性：    yes<br>版本：    CSS3<br>JavaScript 语法：    object.style.wordWrap=”break-word”</p><p><strong>语法</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">word</span>-wrap: normal|<span class="built_in">break</span>-<span class="keyword">word</span>;</span><br></pre></td></tr></table></figure><p>normal    只在允许的断字点换行（浏览器保持默认处理）。<br>break-word    在长单词或 URL 地址内部进行换行。</p><h3 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a><font color="orange">text-overflow</font></h3><p><strong>实例</strong><br>使用 text-overflow 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>text-overflow 属性规定当文本溢出包含元素时发生的事情。</p><p>默认值：    clip<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.textOverflow=”ellipsis”<br><strong>语法</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">text</span>-<span class="built_in">overflow</span>: clip|ellipsis|<span class="keyword">string</span>;</span><br></pre></td></tr></table></figure><p><strong>可能的值</strong><br>clip    修剪文本。<br>ellipsis    显示省略符号来代表被修剪的文本。<br>string    使用给定的字符串来代表被修剪的文本。    </p><p><strong>ps</strong><br>这三行代码就可以实现多余内容用省略号省略<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure></p><p><img src="http://shengyihua.top/css/181001/a476bDdh4k.png?imageslim" alt="mark"></p><h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a><font color="orange">text-shadow</font></h3><p><strong>实例</strong><br>基础的文本阴影效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>text-shadow 属性向文本设置阴影。</p><p>默认值：    none<br>继承性：    yes<br>版本：    CSS3<br>JavaScript 语法：    object.style.textShadow=”2px 2px #ff0000”</p><p><strong>语法</strong><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-<span class="keyword">shadow: </span>h-<span class="keyword">shadow </span>v-<span class="keyword">shadow </span><span class="keyword">blur </span>color<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>注释：text-shadow 属性向文本添加一个或多个阴影。该属性是逗号分隔的阴影列表，每个阴影有两个或三个长度值和一个可选的颜色值进行规定。省略的长度是 0。</p><p>h-shadow    必需。水平阴影的位置。允许负值。<br>v-shadow    必需。垂直阴影的位置。允许负值。<br>blur    可选。模糊的距离。<br>color    可选。阴影的颜色。<br><img src="http://shengyihua.top/css/181001/49ai62mj90.png?imageslim" alt="mark"><br><strong>说明</strong><br>background属性也是可以多组的</p><h3 id="word-break和word-wrap的区别"><a href="#word-break和word-wrap的区别" class="headerlink" title="word-break和word-wrap的区别"></a><font color="orange">word-break和word-wrap的区别</font></h3><p>word-wrap 强调的是是否允许单词内断句，而word-break强调的则是怎么样来进行单词内的断句。<br>举个例子：<br><img src="http://shengyihua.top/css/181001/B02DJakE4I.png?imageslim" alt="mark"><br>这是没有单词内断句的情况，我们看到那个单词是在是太长了，所以它溢出了包裹它的容器。<br><img src="http://shengyihua.top/css/181001/gggg3BKlga.png?imageslim" alt="mark"><br>这是进行了单词内断句的情况，就是一个单词被断作了两行。<br>先要明确一点，不加<strong>word-wrap</strong>或<strong>word-break</strong>的时候，就是浏览器默认的时候，如果有一个单词很长，导致一行中剩下的空间已经放不下它时，则浏览器会把这个单词挪到下一行去：<br><img src="http://shengyihua.top/css/181001/9ELgdK5cil.png?imageslim" alt="mark"><br>word..d 这个我们创造出来的单词本来应该紧接在 long 后面的，但是long后剩下的空间已经不够了，而单词默认是不能断开的，所以浏览器就只好把它屈尊下移了。<br>这个长单词还不算变态的，因为至少它没有长到超过包裹它的元素的长度，但是如果超过了呢？<br><img src="http://shengyihua.top/css/181001/eG13Ji1mmC.png?imageslim" alt="mark"><br>如果超过了就像前面我们提到过的，它会溢出它的父容器外，因为这时它是不允许被截断的，那就只能冲出去咯。<br>这个时候<strong>word-wrap</strong>就能派上用场了。我们给这段文字加上<strong>word-wrap:break-word</strong>看看会怎么样<br><img src="http://shengyihua.top/css/181001/2m2LHkhJDH.png?imageslim" alt="mark"><br><img src="http://shengyihua.top/css/181001/hHDjmkHml5.png?imageslim" alt="mark"><br>哈哈，你给我滚回去吧，变态的长单词，即使你断了也无所谓。<br>这样，为了防止长单词溢出，就在它的内部断句了。这就是 <strong>word-wrap:break-word</strong> 的功能。<br>好吧，你现在可以说了，都有了<strong>word-wrap</strong>这个东西，那还要 <strong>word-break</strong> 来干什么鸟？<br>万恶的资本家总是想要榨干劳动者的一切，你看，下图中的long后面不是还有一段空间吗，难道就这样放着？太浪费了。。。<br><img src="http://shengyihua.top/css/181001/HbjgcJf3A6.png?imageslim" alt="mark"><br>是啊，long后面那里足可以放好几个短的单词了，都是那个臭变态的长单词！</p><p>所以IE真的很体贴，不要再骂它啦，考虑到不浪费一点点空间的问题，它创造出了 <strong>word-break</strong> 这个东西。现在我们来看看使用 <strong>word-break:break-all</strong> 后会怎么样。<br><img src="http://shengyihua.top/css/181001/Cg0Hg7KIEk.png?imageslim" alt="mark"><br><img src="http://shengyihua.top/css/181001/Jfb1aa1IJG.png?imageslim" alt="mark"><br>看看发生什么了？那个变态的长单词并没有被挪到下一行，而是直接放在了long后面，然后在父容器的右边界断开了。所以，它没有浪费空间了哦。</p><p>最开始我们说了，<strong>word-wrap</strong> 是用来决定允不允许单词内断句的，如果不允许的话长单词就会溢出。最重要的一点是它还是会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话就进行单词内的断句。</p><p>而<strong>word-break:break-all</strong>则更变态，因为它断句的方式非常粗暴，它不会尝试把长单词挪到下一行，而是直接进行单词内的断句。这也可以解释为什么说它的作用是决定用什么方式来断句的，那就是——用了<strong>word-break:break-all</strong>，就等于使用粗暴方式来断句了。总之一句话，如果您想更节省空间，那就用<strong>word-break:break-all</strong>就对了！</p><p>但无论如何，单词内的断句都会对西文的可读性产生一定的影响，有时候这点就要注意了。</p><p>ps:网上有些文章说，<strong>word-wrap:break-word</strong> 对长串英文不起作用，其实这是非常错误的，<strong>word-wrap:break-word</strong>照样能把一个长串英文或数字拆成多行。事实上，word-wrap:break-word与word-break:break-all共同点是都能把长单词强行断句，不同点是<strong>word-wrap:break-word</strong>会首先起一个新行来放置长单词，新的行还是放不下这个长单词则会对长单词进行强制断句；而<strong>word-break:break-all</strong>则不会把长单词放在一个新行里，当这一行放不下的时候就直接强制断句了。</p><h2 id="背景-Background"><a href="#背景-Background" class="headerlink" title="背景(Background)"></a>背景(Background)</h2><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p><strong>实例</strong><br>如何在一个声明中设置所有背景属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00FF00</span> <span class="built_in">url</span>(bgimage.gif) no-repeat fixed top;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义和用法</strong><br>background 简写属性在一个声明中设置所有的背景属性。</p><p>可以设置如下属性：</p><p>background-color<br>background-position<br>background-size<br>background-repeat<br>background-origin<br>background-clip<br>background-attachment<br>background-image<br>如果不设置其中的某个值，也不会出问题，比如 background:#ff0000 url(‘smiley.gif’); 也是允许的。</p><p>通常建议使用这个属性，而不是分别使用单个属性，因为这个属性在较老的浏览器中能够得到更好的支持，而且需要键入的字母也更少。</p><p>默认值：    not specified<br>继承性：    no<br>版本：    CSS1 + CSS3<br>JavaScript 语法：    object.style.background=”white url(paper.gif) repeat-y”</p><p><strong>可能的值</strong><br>background-color    规定要使用的背景颜色。    CSS1<br>background-position    规定背景图像的位置。    CSS1<br>background-size    规定背景图片的尺寸。    CSS3<br>background-repeat    规定如何重复背景图像。    CSS1<br>background-origin    规定背景图片的定位区域。    CSS3<br>background-clip    规定背景的绘制区域。    CSS3<br>background-attachment    规定背景图像是否固定或者随着页面的其余部分滚动。    CSS1<br>background-image    规定要使用的背景图像。    CSS1<br>inherit    规定应该从父元素继承 background 属性的设置。    CSS1</p><p><strong>说明：</strong><br>一个元素可以设置多重背景图像。（背景色 &lt;’ background-color ‘&gt; 不能设置多组）。<br>每组属性间使用逗号分隔。如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。<br>示例：假设要在同一个元素上定义3个背景图像<br>缩写方式：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background:url(test1.jpg) no-repeat <span class="keyword">scroll</span> <span class="number">10</span>px <span class="number">20</span>px/<span class="number">50</span>px <span class="number">60</span>px content-<span class="built_in">box</span> padding-<span class="built_in">box</span>,</span><br><span class="line">   url(test1.jpg) no-repeat <span class="keyword">scroll</span> <span class="number">10</span>px <span class="number">20</span>px/<span class="number">70</span>px <span class="number">90</span>px content-<span class="built_in">box</span> padding-<span class="built_in">box</span>,</span><br><span class="line">   url(test1.jpg) no-repeat <span class="keyword">scroll</span> <span class="number">10</span>px <span class="number">20</span>px/<span class="number">110</span>px <span class="number">130</span>px content-<span class="built_in">box</span> padding-<span class="built_in">box</span> <span class="meta">#aaa;</span></span><br></pre></td></tr></table></figure><p>注意， &lt;’ background-color ‘&gt; 只能设置一次，且由于写在前面的背景会叠在之后的背景之上，所以背景色通常都定义在最后一组上，避免背景色将图像盖住。</p><h3 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h3><p><strong>实例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#00ff00</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(255,0,255);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义和用法</strong><br>background-color 属性设置元素的背景颜色。</p><p><strong>元素背景的范围</strong><br>background-color 属性为元素设置一种纯色。这种颜色会填充元素的内容、内边距和边框区域，扩展到元素边框的外边界（但不包括外边距）。如果边框有透明部分（如虚线边框），会透过这些透明部分显示出背景色。</p><p>transparent 值<br>尽管在大多数情况下，没有必要使用 transparent。不过如果您不希望某元素拥有背景色，同时又不希望用户对浏览器的颜色设置影响到您的设计，那么设置 transparent 值还是有必要的。</p><p>默认值：    transparent<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.backgroundColor=”#00FF00”</p><p><strong>可能的值</strong><br>color_name    规定颜色值为颜色名称的背景颜色（比如 red）。<br>hex_number    规定颜色值为十六进制值的背景颜色（比如 #ff0000）。<br>rgb_number    规定颜色值为 rgb 代码的背景颜色（比如 rgb(255,0,0)）。<br>transparent    默认。背景颜色为透明。<br>inherit    规定应该从父元素继承 background-color 属性的设置。</p><h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><p><strong>实例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123; </span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(bgimage.gif);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义和用法</strong><br>background-image 属性为元素设置背景图像。</p><p>元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距。</p><p>默认地，背景图像位于元素的左上角，并在水平和垂直方向上重复。</p><p>提示：请设置一种可用的背景颜色，这样的话，假如背景图像不可用，页面也可获得良好的视觉效果。</p><p><strong>详细说明</strong><br>background-image 属性会在元素的背景中设置一个图像。</p><p>根据 background-repeat 属性的值，图像可以无限平铺、沿着某个轴（x 轴或 y 轴）平铺，或者根本不平铺。</p><p>初始背景图像（原图像）根据 background-position 属性的值放置。</p><p>默认值：    none<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.backgroundImage=”url(stars.gif)”</p><p><strong>可能的值</strong><br>url(‘URL’)    指向图像的路径。<br>none    默认值。不显示背景图像。<br>inherit    规定应该从父元素继承 background-image 属性的设置。</p><h3 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h3><p><strong>实例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(stars.gif);</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义和用法</strong><br>background-repeat 属性设置是否及如何重复背景图像。</p><p>默认地，背景图像在水平和垂直方向上重复。</p><p><strong>详细说明</strong><br>background-repeat 属性定义了图像的平铺模式。</p><p>从原图像开始重复，原图像由 background-image 定义，并根据 background-position 的值放置。<br>允许提供2个参数，如果提供全部2个参数，第1个用于横向，第二个用于纵向。<br>如果只提供1个参数，则用于横向和纵向。特殊值repeat-x和repeat-y除外，因为repeat-x相当于repeat no-repeat，repeat-y相当于no-repeat repeat，即其实repeat-x和repeat-y等价于提供了2个参数值</p><p>默认值：    repeat<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.backgroundRepeat=”repeat-y”<br>提示和注释<br>提示：背景图像的位置是根据 background-position 属性设置的。如果未规定 background-position 属性，图像会被放置在元素的左上角。</p><p><strong>可能的值</strong><br>repeat    默认。背景图像将在垂直方向和水平方向重复。<br>repeat-x    背景图像将在水平方向重复。<br>repeat-y    背景图像将在垂直方向重复。<br>no-repeat    背景图像将仅显示一次。<br>inherit    规定应该从父元素继承 background-repeat 属性的设置。</p><h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p><strong>实例</strong><br>如何设置固定的背景图像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> </span><br><span class="line">  &#123; </span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(bgimage.gif); </span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <strong>定义和用法</strong><br>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><p>默认值：    scroll<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.backgroundAttachment=”fixed”</p><p><strong>可能的值</strong><br>scroll    默认值。背景图相对于元素固定。（理解成吸附在元素的上方的左上角位置，就算元素有滚动条，我吸附在你上方，我不动）<br>fixed    背景图相对于视口固定，所以随页面滚动背景不动，相当于背景被设置在了html上。（理解成吸附在html上）<br>local：背景图相对于元素内容固定。（理解成吸附在元素内容上，内容动了，背景自然动了）<br>inherit    规定应该从父元素继承 background-attachment 属性的设置。<br><a href="https://www.cnblogs.com/starof/p/4511367.html" target="_blank" rel="noopener">background-attachment详解</a><br><a href="https://segmentfault.com/q/1010000016744594?_ea=4810406" target="_blank" rel="noopener">自己碰到的坑</a></p><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><p><strong>实例</strong><br>如何定位背景图像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'bgimage.gif'</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line"><span class="attribute">background-attachment</span>:fixed;</span><br><span class="line"><span class="attribute">background-position</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>background-position 属性设置背景图像的起始位置。</p><p>这个属性设置背景原图像（由 background-image 定义）的位置，背景图像如果要重复，将从这一点开始。</p><p>提示：您需要把 background-attachment 属性设置为 “fixed”，才能保证该属性在 Firefox 和 Opera 中正常工作。</p><p>默认值：    0% 0%<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.backgroundPosition=”center”</p><p><strong>可能的值</strong></p><table><br>  <tr><br>    <th width="10%," bgcolor="yellow">值</th><br>    <th width="40%," bgcolor="yellow">描述</th><br>  </tr><br>  <tr><br>    <td bgcolor="#00FF00"><br>top left<br><br>top center<br><br>top right<br><br>center left<br><br>center center<br><br>center right<br><br>bottom left<br><br>bottom center<br><br>bottom right</td><br>    <td> 如果您仅规定了一个关键词，那么第二个值将是”center”。<br><br>默认值：0% 0%。 </td><br>  </tr><br>  <tr><br>    <td bgcolor="#00FF00">x% y% </td><br>    <td>第一个值是水平位置，第二个值是垂直位置。<br><br>左上角是 0% 0%。右下角是 100% 100%。<br><br>如果您仅规定了一个值，另一个值将是 50%。 </td><br></tr><br>  <tr><br>    <td bgcolor="#00FF00">xpos ypos </td><br>    <td>第一个值是水平位置，第二个值是垂直位置。<br><br>左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。<br><br>如果您仅规定了一个值，另一个值将是50%。<br><br>您可以混合使用 % 和 position 值。 </td><br></tr><br></table><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a><font color="orange">background-origin</font></h3><p><strong>实例</strong><br>相对于内容框来定位背景图像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'smiley.gif'</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>:left;</span><br><span class="line"><span class="attribute">background-origin</span>:content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>background-origin 属性规定 background-position 属性相对于什么位置来定位。</p><p>注释：如果背景图像的 background-attachment 属性为 “fixed”，则该属性没有效果。</p><p>默认值：    padding-box<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.backgroundOrigin=”content-box”</p><p><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">background</span>-<span class="built_in">origin</span>: padding-<span class="built_in">box</span>|<span class="built_in">border</span>-<span class="built_in">box</span>|<span class="built_in">content</span>-<span class="built_in">box</span>;</span><br></pre></td></tr></table></figure><p><strong>可能的值</strong><br>padding-box    从padding区域（含padding）开始显示背景图像。<br>border-box    从border区域（含border）开始显示背景图像。<br>content-box    从content区域开始显示背景图像。<br><img src="http://shengyihua.top/css/181001/c32e2dBfbI.png?imageslim" alt="mark"></p><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a><font color="orange">background-clip</font></h3><p><strong>实例</strong><br>规定背景的绘制区域：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-color</span>:yellow;</span><br><span class="line"><span class="attribute">background-clip</span>:content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>background-clip 属性规定背景的绘制区域。</p><p>默认值：    border-box<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.backgroundClip=”content-box”<br><strong>语法</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">background</span>-clip: <span class="built_in">border</span>-<span class="built_in">box</span>|padding-<span class="built_in">box</span>|<span class="built_in">content</span>-<span class="built_in">box</span>;</span><br></pre></td></tr></table></figure><p><strong>可能的值</strong><br>border-box    从border区域（不含border）开始向外裁剪背景。<br>padding-box    从padding区域（不含padding）开始向外裁剪背景。<br>content-box    从content区域开始向外裁剪背景。<br><img src="http://shengyihua.top/css/181001/B82jfKjk1H.png?imageslim" alt="mark"><br>说明：background-origin默认是在padding的区域显示，所以第一幅图和第二幅图从border和padding往外裁没什么效果，都一样</p><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a><font color="orange">background-size</font></h3><p><strong>实例</strong><br>规定背景图像的尺寸：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(img_flwr.gif);</span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">80px</span> <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义和用法</strong><br>background-size 属性规定背景图像的尺寸。</p><p>默认值：    auto<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.backgroundSize=”60px 80px”</p><p><strong>语法</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: length|<span class="type">percentage</span>|<span class="type">cover</span>|<span class="type">contain</span>;</span><br></pre></td></tr></table></figure><table><br>  <tr><br>    <th width="10%," bgcolor="yellow">值</th><br>    <th width="40%," bgcolor="yellow">描述</th><br>  </tr><br>  <tr><br>    <td bgcolor="#00FF00"><br>    length<br></td><br>    <td><br>    设置背景图像的高度和宽度。<br><br>第一个值设置宽度，第二个值设置高度。<br><br>如果只设置一个值，则第二个值会被设置为 “auto”。</td><br>  </tr><br>    <tr><br>    <td bgcolor="#00FF00"><br>    percentage<br></td><br>    <td><br>  以父元素的百分比来设置背景图像的宽度和高度。<br><br>第一个值设置宽度，第二个值设置高度。<br><br>如果只设置一个值，则第二个值会被设置为 “auto”。</td><br>  </tr><br>    <br>    <tr><br>    <td bgcolor="#00FF00"><br>    cover<br></td><br>    <td><br>将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。</td><br>  </tr><br>    <br>    <tr><br>    <td bgcolor="#00FF00"><br>    contain<br></td><br>    <td><br>  将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。</td><br>  </tr><br>  </table><br><img src="http://shengyihua.top/css/181001/84Kk46HImk.png?imageslim" alt="mark"><br>说明：cover和contain都是等比例缩放哦，可以想象都是往右下角拉扯图片，contain是拉倒宽度或者高度和容器相等就停下来，一个是拉倒把容器全部覆盖为止。<br><br>## 外边距(Margin)<br><br>###  margin<br><strong>实例</strong><br>设置 p 元素的 4 个外边距：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">2cm</span> <span class="number">4cm</span> <span class="number">3cm</span> <span class="number">4cm</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>margin 简写属性在一个声明中设置所有外边距属性。该属性可以有 1 到 4 个值。<br><br><strong>说明</strong><br>这个简写属性设置一个元素所有外边距的宽度，或者设置各边上外边距的宽度。<br><br>块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距。行内元素的的左右外边距不会合并。同样地，浮动元素的外边距也不会合并。允许指定负的外边距值，不过使用时要小心。<br><br>注释：允许使用负值。<br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">上外边距是 10px</span><br><span class="line">右外边距是 5px</span><br><span class="line">下外边距是 15px</span><br><span class="line">左外边距是 20px</span><br></pre></td></tr></table></figure><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">上外边距是 10px</span><br><span class="line">右外边距和左外边距是 5px</span><br><span class="line">下外边距是 15px</span><br></pre></td></tr></table></figure><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">上外边距和下外边距是 10px</span><br><span class="line">右外边距和左外边距是 5px</span><br></pre></td></tr></table></figure><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">所有 4 个外边距都是 10px</span><br></pre></td></tr></table></figure><br><br>默认值：    0<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.margin=”10px 5px”<br><br><strong>注意：</strong><br>margin-top、margin-right、margin-bottom、margin-left用法一样就是指的四个方向<br>## 内边距(Padding)<br><br>### padding<br><strong>实例</strong><br>设置 p 元素的 4 个内边距：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">2cm</span> <span class="number">4cm</span> <span class="number">3cm</span> <span class="number">4cm</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>padding 简写属性在一个声明中设置所有内边距属性。<br><br><strong>说明</strong><br>这个简写属性设置元素所有内边距的宽度，或者设置各边上内边距的宽度。行内非替换元素上设置的内边距不会影响行高计算；因此，如果一个元素既有内边距又有背景，从视觉上看可能会延伸到其他行，有可能还会与其他内容重叠。元素的背景会延伸穿过内边距。不允许指定负边距值。<br><br>注释：不允许使用负值。<br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">上内边距是 10px</span><br><span class="line">右内边距是 5px</span><br><span class="line">下内边距是 15px</span><br><span class="line">左内边距是 20px</span><br></pre></td></tr></table></figure><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">上内边距是 10px</span><br><span class="line">右内边距和左内边距是 5px</span><br><span class="line">下内边距是 15px</span><br></pre></td></tr></table></figure><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">上内边距和下内边距是 10px</span><br><span class="line">右内边距和左内边距是 5px</span><br></pre></td></tr></table></figure><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">所有 4 个内边距都是 10px</span><br></pre></td></tr></table></figure><br><br>默认值：    0<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.padding=”10px 5px”<br><br>## 边框(Border)<br><br>### border<br><strong>实例</strong><br>设置 4 个边框的样式：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>border 简写属性在一个声明设置所有的边框属性。<br><br>可以按顺序设置如下属性：<br><br><em> border-width</em> border-style<br><em> border-color<br><br>如果不设置其中的某个值，也不会出问题，比如 border:solid #ff0000; 也是允许的。<br><br>默认值：    not specified<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.border=”3px solid blue”<br><br><strong>可能的值</strong><br>border-width    规定边框的宽度。参阅：border-width 中可能的值。<br>border-style    规定边框的样式。参阅：border-style 中可能的值。<br>border-color    规定边框的颜色。参阅：border-color 中可能的值。<br>inherit    规定应该从父元素继承 border 属性的设置。<br><br> <strong>注意：</strong><br>border-top<br>border-top-width<br>border-top-style<br>border-top-color<br>border-right<br>border-right-width<br>border-right-style<br>border-right-color<br>border-bottom<br>border-bottom-width<br>border-bottom-style<br>border-bottom-color<br>border-left<br>border-left-width<br>border-left-style<br>border-left-color<br>四个方向都可以分别进行设置，用法是一样的。<br><br>### border-color<br><strong>实例</strong><br>设置 4 个边框的颜色：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">  <span class="attribute">border-color</span>:<span class="number">#ff0000</span> <span class="number">#0000ff</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>border-color 属性设置四条边框的颜色。此属性可设置 1 到 4 种颜色。<br><br>border-color 属性是一个简写属性，可设置一个元素的所有边框中可见部分的颜色，或者为 4 个边分别设置不同的颜色。请看下面的例子：<br><br><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">border-<span class="built_in">color</span>:<span class="built_in">red</span> <span class="built_in">green</span> <span class="built_in">blue</span> pink;</span><br><span class="line">上边框是红色</span><br><span class="line">右边框是绿色</span><br><span class="line">下边框是蓝色</span><br><span class="line">左边框是粉色</span><br></pre></td></tr></table></figure><br><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-<span class="built_in">color</span>:<span class="built_in">red</span> <span class="built_in">green</span> <span class="built_in">blue</span>;</span><br><span class="line">上边框是红色</span><br><span class="line">右边框和左边框是绿色</span><br><span class="line">下边框是蓝色</span><br></pre></td></tr></table></figure><br><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border-<span class="built_in">color</span>:dotted <span class="built_in">red</span> <span class="built_in">green</span>;</span><br><span class="line">上边框和下边框是红色</span><br><span class="line">右边框和左边框是绿色</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">color</span>:red;</span><br><span class="line">所有 <span class="number">4</span> 个边框都是红色</span><br></pre></td></tr></table></figure><br><br>要记住，边框的样式不能为 none 或 hidden，否则边框不会出现。<br><br>注释：请始终把 border-style 属性声明到 border-color 属性之前。元素必须在您改变其颜色之前获得边框。<br><br>默认值：    not specified<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.borderColor=”#FF0000 blue”<br><br><strong>可能的值</strong><br>color_name    规定颜色值为颜色名称的边框颜色（比如 red）。<br>hex_number    规定颜色值为十六进制值的边框颜色（比如 #ff0000）。<br>rgb_number    规定颜色值为 rgb 代码的边框颜色（比如 rgb(255,0,0)）。<br>transparent    默认值。边框颜色为透明。<br>inherit    规定应该从父元素继承边框颜色。<br><br>###  border-width<br><strong>实例</strong><br>设置四个边框的宽度：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">  <span class="attribute">border-width</span>:<span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>border-width 简写属性为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。<br><br>只有当边框样式不是 none 时才起作用。如果边框样式是 none，边框宽度实际上会重置为 0。不允许指定负长度值。<br><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">width</span>:thin medium thick 10px;</span><br><span class="line">上边框是细边框</span><br><span class="line">右边框是中等边框</span><br><span class="line">下边框是粗边框</span><br><span class="line">左边框是 10px 宽的边框</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">width</span>:thin medium thick;</span><br><span class="line">上边框是 10px</span><br><span class="line">右边框和左边框是中等边框</span><br><span class="line">下边框是粗边框</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">width</span>:thin medium;</span><br><span class="line">上边框和下边框是细边框</span><br><span class="line">右边框和左边框是中等边框</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">width</span>:thin;</span><br><span class="line">所有 <span class="number">4</span> 个边框都是细边框</span><br></pre></td></tr></table></figure><br><br>默认值：    medium<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.borderWidth=”thin thick”<br><br><strong>可能的值</strong><br>thin    定义细的边框。<br>medium    默认。定义中等的边框。<br>thick    定义粗的边框。<br>length    允许您自定义边框的宽度。<br>inherit    规定应该从父元素继承边框宽度。<br><br>### border-style<br><strong>实例</strong><br>设置 4 个边框的样式：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>border-style 属性用于设置元素所有边框的样式，或者单独地为各边设置边框样式。<br><br>只有当这个值不是 none 时边框才可能出现。<br><br><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">border-<span class="string">style:</span>dotted solid <span class="keyword">double</span> dashed; </span><br><span class="line">上边框是点状</span><br><span class="line">右边框是实线</span><br><span class="line">下边框是双线</span><br><span class="line">左边框是虚线</span><br></pre></td></tr></table></figure><br><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-<span class="string">style:</span>dotted solid <span class="keyword">double</span>;</span><br><span class="line">上边框是点状</span><br><span class="line">右边框和左边框是实线</span><br><span class="line">下边框是双线</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">style</span>:dotted solid;</span><br><span class="line">上边框和下边框是点状</span><br><span class="line">右边框和左边框是实线</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">style</span>:dotted;</span><br><span class="line">所有 <span class="number">4</span> 个边框都是点状</span><br></pre></td></tr></table></figure><br><br>默认值：    not specified<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.borderStyle=”dotted double”<br><br><strong>可能的值</strong><br>none    定义无边框。<br>hidden    与 “none” 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。<br>dotted    定义点状边框。在大多数浏览器中呈现为实线。<br>dashed    定义虚线。在大多数浏览器中呈现为实线。<br>solid    定义实线。<br>double    定义双线。双线的宽度等于 border-width 的值。<br>groove    定义 3D 凹槽边框。其效果取决于 border-color 的值。<br>ridge    定义 3D 垄状边框。其效果取决于 border-color 的值。<br>inset    定义 3D inset 边框。其效果取决于 border-color 的值。<br>outset    定义 3D outset 边框。其效果取决于 border-color 的值。<br>inherit    规定应该从父元素继承边框样式。<br><br><strong>描述</strong><br>最不可预测的边框样式是 double。它定义为两条线的宽度再加上这两条线之间的空间等于 border-width 值。不过，CSS 规范并没有说其中一条线是否比另一条粗或者两条线是否应该是一样的粗，也没有指出线之间的空间是否应当比线粗。所有这些都有用户代理决定，创作人员对这个决定没有任何影响。<br><br>### <font color="orange">border-radius</font><br><strong>实例</strong><br>向 div 元素添加圆角边框：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">2px</span> solid;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>border-radius 属性是一个简写属性，用于设置四个 border-</em>-radius 属性。<br><br>提示：该属性允许您为元素添加圆角边框！<br><br>默认值：    0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderRadius=”5px”<br><strong>语法</strong><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>: <span class="number">1</span>-<span class="number">4</span> <span class="built_in">length</span>|<span class="symbol">%</span> / <span class="number">1</span>-<span class="number">4</span> <span class="built_in">length</span>|<span class="symbol">%</span>;</span><br></pre></td></tr></table></figure><br><br>注释：按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同（老规矩就是斜对角原则）。<br><br>length    定义圆角的形状。<br>%    以百分比定义圆角的形状。<br><br>border-radius: 1-4 length|% / 1-4 length|%;是border-radius的完整写法，我们平时的写法其实都是简写，平时我们写的<br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span> : 50px</span><br></pre></td></tr></table></figure><br><br>其实完整的写法应该是：<br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span> : 50px 50px 50px 50px / 50px 50px 50px 50px;</span><br></pre></td></tr></table></figure><br><br>规则是先把<code>/</code>前面的按照斜对角法则补全，然后<code>/</code>后面的照抄。比如<code>10px 20px 30px</code>先补全<code>10px 20px 30px 20px</code>然后后面照抄 <code>10px 20px 30px 20px / 10px 20px 30px 20px</code>这是默认垂直半径和水平半径相等，如果矩形的宽为<code>200px</code>，高为<code>100px</code>，<code>border-radius</code>设置为<code>50%</code>，那么第一步计算出来的就是左上角的数值<code>100px / 50px</code>，然后 <code>/</code> 前后进行对角法则扩充就行<code>100px 100px 100px 100px/ 50px 50px 50px 50px</code><br><br>“/”前的四个数值表示圆角的水平半径，后面四个值表示圆角的垂直半径，什么是水平半径和垂直半径呢，见下图<br><img src="http://shengyihua.top/css/181002/ec1I0f7I4G.png?imageslim" alt="mark"><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>:100px 25px 50px 50px/50px 25px 50px 25px;</span><br></pre></td></tr></table></figure><br><br>对应如下图：<br><img src="http://shengyihua.top/css/181006/E0EI58i667.png?imageslim" alt="mark"><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>:2em;</span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line"><span class="built_in">border</span>-top-left-<span class="built_in">radius</span>:2em;</span><br><span class="line"><span class="built_in">border</span>-top-right-<span class="built_in">radius</span>:2em;</span><br><span class="line"><span class="built_in">border</span>-bottom-right-<span class="built_in">radius</span>:2em;</span><br><span class="line"><span class="built_in">border</span>-bottom-left-<span class="built_in">radius</span>:2em;</span><br></pre></td></tr></table></figure><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>: 2em 1em 4em / <span class="number">0.</span>5em 3em;</span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line"><span class="built_in">border</span>-top-left-<span class="built_in">radius</span>: 2em <span class="number">0.</span>5em;</span><br><span class="line"><span class="built_in">border</span>-top-right-<span class="built_in">radius</span>: 1em 3em;</span><br><span class="line"><span class="built_in">border</span>-bottom-right-<span class="built_in">radius</span>: 4em <span class="number">0.</span>5em;</span><br><span class="line"><span class="built_in">border</span>-bottom-left-<span class="built_in">radius</span>: 1em 3em;</span><br></pre></td></tr></table></figure><br><br><strong>注意</strong><br>border-top-left-radius<br>border-top-right-radius<br>border-bottom-right-radius<br>border-bottom-left-radius<br>就是四个角，用法是一样的<br><br>### <font color="orange">box-shadow</font><br>  <strong>实例</strong><br>向 div 元素添加 box-shadow：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>box-shadow 属性向框添加一个或多个阴影。<br><br>提示：请使用 border-image-<em> 属性来构造漂亮的可伸缩按钮！<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.boxShadow=”10px 10px 5px #888888”<br><br><strong>语法</strong><br><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">box-shadow: </span>h-<span class="keyword">shadow </span>v-<span class="keyword">shadow </span><span class="keyword">blur </span>spread color <span class="keyword">inset;</span></span><br></pre></td></tr></table></figure><br><br>注释：box-shadow 向框添加一个或多个阴影。该属性是由逗号分隔的阴影列表，每个阴影由 2-4 个长度值、可选的颜色值以及可选的 inset 关键词来规定。省略长度的值是 0。<br><br>h-shadow    必需。水平阴影的位置。允许负值。<br>v-shadow    必需。垂直阴影的位置。允许负值。<br>blur    可选。阴影模糊值（模糊半径）<br>spread    可选。阴影的尺寸。值越大阴影越大（扩展半径）<br>color    可选。阴影的颜色。<br>inset    可选。将外部阴影 (outset) 改为内部阴影。<br>ps: 模糊半径就是模糊程度，值越大越模糊，大家都懂吧。有人说扩展半径有点类似于在阴影上增加了一个padding的东西，我倒觉得，如果参照物是阴影的话，我倒觉得扩展半径类似于增加了一个margin的东西，不过这个东西见仁见智吧。    扩展阴影是以阴影的外边界向外扩展（为正数）或者向内抵消原来的阴影（为负数），当负数绝对值大于等于某方向的阴影偏移量时，该方向的阴影消失。<br><br>### <font color="orange">border-image</font><br><strong>实例</strong><br>将图片规定为包围 div 元素的边框：<br><br>    div<br>    {<br>    -webkit-border-image:url(border.png) 30 30 round; /</em> Safari 5 <em>/<br>    -o-border-image:url(border.png) 30 30 round; /</em> Opera <em>/<br>    border-image:url(border.png) 30 30 round;<br>    }<br><strong>定义和用法</strong><br>border-image 属性是一个简写属性，用于设置以下属性：<br><br> - border-image-source<br> - border-image-slice<br> - border-image-width<br> - border-image-outset<br> - border-image-repeat<br><br>如果省略值，会设置其默认值。<br><br>提示：请使用 border-image-</em> 属性来构造漂亮的可伸缩按钮！<br><br>默认值：    none 100% 1 0 stretch<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderImage=”url(border.png) 30 30 round”<br><br><strong>可能的值</strong><br>border-image-source    用在边框的图片的路径。<br>border-image-slice    图片边框向内偏移。<br>border-image-width    图片边框的宽度。<br>border-image-outset    边框图像区域超出边框的量。<br>border-image-repeat    图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。<br><a href="https://segmentfault.com/a/1190000010969367" target="_blank" rel="noopener">详解</a><br><br>### <font color="orange">border-image-source</font><br><strong>实例</strong><br>使用一幅图像作为围绕 div 元素的边框：<br><br>    div<br>    {<br>    border-image-source: url(border.png);<br>    }<br><br><strong>定义和用法</strong><br>border-image-source 属性规定要使用的图像，代替 border-style 属性中设置的边框样式。<br><br>提示：如果值为 “none”，或者如果图像无法显示，则使用边框样式。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderImageSource=”url(border.png)”<br><br><strong>语法</strong><br><br>    border-image-source: none|image;<br><br><strong>值    描述</strong><br>none    不使用图像。<br>image    用作边框的图像的路径。<br><br>### <font color="orange">border-image-slice</font><br><strong>实例</strong><br>规定图像边框的向内偏移：<br><br>    div<br>    {<br>    border-image-source: url(border.png);<br>    border-image-slice: 50% 50%;<br>    }<br><strong>定义和用法</strong><br>border-image-slice 属性规定图像边框的向内偏移。<br><br>默认值：    100%<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderImageSlice=”50% 50%”<br><br><strong>语法</strong><br><br>    border-image-slice: number|%|fill;<br><br>注释：该属性规定图像的上、右、下、左侧边缘的向内偏移，图像被分割为九个区域：四个角、四条边以及一个中间区域。除非使用了关键词 fill，否则中间的图像部分会被丢弃。如果省略第四个数值/百分比，则与第二个值相同。如果省略第三个值，则与第一个值相同。如果省略第二个值，则与第一个值相同。<br><br><strong>值    描述</strong><br>number    数字值，代表图像中像素（如果是光栅图像）或矢量坐标（如果是矢量图像）。<br>%    相对于图像尺寸的百分比值：图像的宽度影响水平偏移，高度影响垂直偏移。<br>fill    保留边框图像的中间部分。<br><br>### <font color="orange">border-image-slice</font><br><strong>实例</strong><br>规定图像边框的宽度：<br><br>    div<br>    {<br>    border-image-source: url(border.png);<br>    border-image-width: 30 30;<br>    }<br><br><strong>定义和用法</strong><br>border-image-width 属性规定图像边框的宽度。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderImageWidth=”30 30”<br><br><strong>语法</strong><br><br>    border-image-width: number|%|auto;<br><br>注释：border-image-width 属性的四个之规定将边框图像分割为九个部分的偏移。它们代表了从区域的上、右、下、左侧向内的距离。如果忽略第四个值，则与第二个值相同。如果省略第三个值，则与第一个值相同。如果省略第二个值，则与第一个值相同。不允许任何负值作为 border-image-width 值。<br><br><strong>值    描述</strong><br>number    代表对应的 border-width 的倍数。<br>%    参考边框图像区域的尺寸：区域的高度影响水平偏移，宽度影响垂直偏移。<br>auto    如果规定该属性，则宽度为对应的图像切片的固有宽度。<br><br>### <font color="orange">border-image-repeat</font><br><strong>实例</strong><br>规定如何重复图像边框：<br><br>    div<br>    {<br>    border-image-source: url(border.png);<br>    border-image-repeat: round;<br>    }<br><br><strong>定义和用法</strong><br>border-image-repeat 属性规定图像边框是否应该被重复（repeated）、拉伸（stretched）或铺满（rounded）。<br><br>默认值：    stretch<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderImageRepeat=”round”<br><br><strong>可能的值</strong><br>border-image-repeat: stretch|repeat|round;<br>注释：该属性规定如何延展和铺排边框图像的边缘和中间部分。因此，您可以规定两个值。如果省略第二个值，则采取与第一个值相同的值。<br><br><strong>值    描述</strong><br>stretch    拉伸图像来填充区域<br>repeat    平铺（重复）图像来填充区域。<br>round    类似 repeat 值。如果无法完整平铺所有图像，则对图像进行缩放以适应区域。<br><br>### <font color="orange">border-image-outset</font><br><strong>实例</strong><br>设置 border-image-outset 属性：<br><br>    div<br>    {<br>    border-image-source: url(border.png);<br>    border-image-outset: 30 30;<br>    }<br><br><strong>定义和用法</strong><br>border-image-outset 属性规定边框图像超过边框盒的量。<br><br>默认值：    0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.borderImageOutset=”30 30”<br><br><strong>可能的值</strong><br>border-image-outset: length|number;<br>注释：border-image-outset 属性规定边框图像超出边框盒的量。在上、右、下、左侧。如果忽略第四个值，则与第二个值相同。如果省略第三个值，则与第一个值相同。如果省略第二个值，则与第一个值相同。不允许任何负值作为 border-image-outset 值。<br><br><strong>值    描述</strong><br>length<br>number    代表对应的 border-width 的倍数。<br><br>## 列表(List)<br><br>### list-style<br><strong>实例</strong><br>把图像设置为列表中的列表项目标记：<br><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul</span></span><br><span class="line"><span class="string"> </span> &#123;</span><br><span class="line">  <span class="built_in">list-style:square</span> <span class="string">inside </span><span class="string">url(</span><span class="string">'/i/arrow.gif'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>list-style 简写属性在一个声明中设置所有的列表属性。<br><br><strong>说明</strong><br>该属性是一个简写属性，涵盖了所有其他列表样式属性。由于它应用到所有 display 为 list-item 的元素，所以在普通的 HTML 和 XHTML 中只能用于 li 元素，不过实际上它可以应用到任何元素，并由 list-item 元素继承。<br><br>可以按顺序设置如下属性：<br><br>list-style-type<br>list-style-position<br>list-style-image<br>可以不设置其中的某个值，比如 “list-style:circle inside;” 也是允许的。未设置的属性会使用其默认值。<br><br>默认值：    disc outside none<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.listStyle=”decimal inside”<br><br><strong>可能的值</strong><br>list-style-type    设置列表项标记的类型。参阅：list-style-type 中可能的值。<br>list-style-position    设置在何处放置列表项标记。参阅：list-style-position 中可能的值。<br>list-style-image    使用图像来替换列表项的标记。参阅：list-style-image 中可能的值。<br>inherit    规定应该从父元素继承 list-style 属性的值。<br><br>### list-style-image<br><strong>实例</strong><br>把图像设置为列表中的项目标记：<br><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul</span></span><br><span class="line"><span class="string"> </span> &#123;</span><br><span class="line">  <span class="built_in">list-style-image:url("/i/arrow.gif");</span></span><br><span class="line"><span class="built_in"></span>  <span class="built_in">list-style-type:square;</span></span><br><span class="line"><span class="built_in"></span>  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>list-style-image 属性使用图像来替换列表项的标记。<br><br><strong>说明</strong><br>这个属性指定作为一个有序或无序列表项标志的图像。图像相对于列表项内容的放置位置通常使用 list-style-position 属性控制。<br><br>注释：请始终规定一个 “list-style-type” 属性以防图像不可用。<br><br>默认值：    none<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.listStyleImage=”url(‘/images/blueball.gif’)”<br><br><strong>可能的值</strong><br>URL    图像的路径。<br>none    默认。无图形被显示。<br>inherit    规定应该从父元素继承 list-style-image 属性的值。<br><br>### list-style-position<br><strong>实例</strong><br>规定列表中列表项目标记的位置：<br><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul</span></span><br><span class="line"><span class="string"> </span> &#123;</span><br><span class="line">  <span class="built_in">list-style-position:inside;</span></span><br><span class="line"><span class="built_in"></span>  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>list-style-position 属性设置在何处放置列表项标记。<br><br><strong>说明</strong><br>该属性用于声明列表标志相对于列表项内容的位置。外部 (outside) 标志会放在离列表项边框边界一定距离处，不过这距离在 CSS 中未定义。内部 (inside) 标志处理为好像它们是插入在列表项内容最前面的行内元素一样。<br><br>默认值：    outside<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.listStylePosition=”inside”<br><br><strong>可能的值</strong><br>inside    列表项目标记放置在文本以内，且环绕文本根据标记对齐。<br>outside    默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。<br>inherit    规定应该从父元素继承 list-style-position 属性的值。<br><br>### list-style-type<br><strong>实例</strong><br>设置不同的列表样式：<br><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul.</span><span class="string">circle </span>&#123;<span class="built_in">list-style-type:circle;&#125;</span></span><br><span class="line"><span class="built_in">ul.square</span> &#123;<span class="built_in">list-style-type:square;&#125;</span></span><br><span class="line"><span class="built_in">ol.upper-roman</span> &#123;<span class="built_in">list-style-type:upper-roman;&#125;</span></span><br><span class="line"><span class="built_in">ol.lower-alpha</span> &#123;<span class="built_in">list-style-type:lower-alpha;&#125;</span></span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>list-style-type 属性设置列表项标记的类型。<br><br>默认值：    disc<br>继承性：    yes<br>版本：    CSS1<br>JavaScript 语法：    object.style.listStyleType=”square”<br><br><strong>可能的值</strong><br><br>CSS2 的值：<br>none    无标记。<br>disc    默认。标记是实心圆。<br>circle    标记是空心圆。<br>square    标记是实心方块。<br>decimal    标记是数字。<br>decimal-leading-zero    0开头的数字标记。(01, 02, 03, 等。)<br>lower-roman    小写罗马数字(i, ii, iii, iv, v, 等。)<br>upper-roman    大写罗马数字(I, II, III, IV, V, 等。)<br>lower-alpha    小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)<br>upper-alpha    大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)<br>lower-greek    小写希腊字母(alpha, beta, gamma, 等。)<br>lower-latin    小写拉丁字母(a, b, c, d, e, 等。)<br>upper-latin    大写拉丁字母(A, B, C, D, E, 等。)<br>hebrew    传统的希伯来编号方式<br>armenian    传统的亚美尼亚编号方式<br>georgian    传统的乔治亚编号方式(an, ban, gan, 等。)<br>cjk-ideographic    简单的表意数字<br>hiragana    标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）<br>katakana    标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）<br>hiragana-iroha    标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）<br>katakana-iroha    标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名）<br><br>CSS2.1 的值：<br>disc | circle | square | decimal | decimal-leading-zero |<br>lower-roman | upper-roman | lower-greek | lower-latin | upper-latin |<br>armenian | georgian | none | inherit<br><br>## 表格(Table)<br><br>### table-layout<br><strong>实例</strong><br>设置表格布局算法：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">table-layout</span>:fixed;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>tableLayout 属性用来显示表格单元格、行、列的算法规则。<br><br><strong>固定表格布局：</strong><br>固定表格布局与自动表格布局相比，允许浏览器更快地对表格进行布局。<br><br>在固定表格布局中，水平布局仅取决于表格宽度、列宽度、表格边框宽度、单元格间距，而与单元格的内容无关。<br><br>通过使用固定表格布局，用户代理在接收到第一行后就可以显示表格。<br><br><strong>自动表格布局：</strong><br>在自动表格布局中，列的宽度是由列单元格中没有折行的最宽的内容设定的。<br><br>此算法有时会较慢，这是由于它需要在确定最终的布局之前访问表格中所有的内容。<br><br><strong>说明</strong><br>该属性指定了完成表布局时所用的布局算法。固定布局算法比较快，但是不太灵活，而自动算法比较慢，不过更能反映传统的 HTML 表。<br><br>默认值：    auto<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.tableLayout=”fixed”<br><br><strong>可能的值</strong><br>automatic    默认。列宽度由单元格内容设定。<br>fixed    列宽由表格宽度和列宽度设定。<br>inherit    规定应该从父元素继承 table-layout 属性的值。<br><br>### border-collapse<br><strong>实例</strong><br>为表格设置合并边框模型：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>border-collapse 属性设置表格的边框是否被合并为一个单一的边框，还是象在标准的 HTML 中那样分开显示。<br><br>默认值：    separate<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.borderCollapse=”collapse”<br><br><strong>可能的值</strong><br>separate    默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。<br>collapse    如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。<br>inherit    规定应该从父元素继承 border-collapse 属性的值。<br><br>ps:<br>cellspacing是表格里单元格之间的距离;<br>cellpadding是表格里单元格内的空白部分;<br>一般都要把这两个值设为0，下图两个值都是1px，但是html5不支持这两个属性了<br><img src="http://shengyihua.top/css/181006/KGdaKLFF64.png?imageslim" alt="mark"><br><br>### border-spacing<br><strong>实例</strong><br>为表格设置 border-spacing：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>:separate;</span><br><span class="line">  <span class="attribute">border-spacing</span>:<span class="number">10px</span> <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>border-spacing 属性设置相邻单元格的边框间的距离（仅用于“边框分离”模式）。<br><br>注释：某些版本的IE浏览器不支持此属性。<br><br><strong>说明</strong><br>该属性指定分隔边框模型中单元格边界之间的距离。在指定的两个长度值中，第一个是水平间隔，第二个是垂直间隔。除非 border-collapse 被设置为 separate，否则将忽略这个属性。尽管这个属性只应用于表，不过它可以由表中的所有元素继承。<br><br>默认值：    not specified<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.borderSpacing=”15px”<br><br><strong>可能的值</strong><br>length length    规定相邻单元的边框之间的距离。使用 px、cm 等单位。不允许使用负值。如果定义一个 length 参数，那么定义的是水平和垂直间距。如果定义两个 length 参数，那么第一个设置水平间距，而第二个设置垂直间距。<br>inherit    规定应该从父元素继承 border-spacing 属性的值。<br><br>### caption-side<br><strong>实例</strong><br>规定表格标题的放置方式：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">caption</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">caption-side</span>:bottom;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>caption-side 属性设置表格标题的位置。<br><br><strong>说明</strong><br>该属性指定了表标题相对于表框的放置位置。表标题显示为好像它是表之前（或之后）的一个块级元素。<br><br>默认值：    top<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.captionSide=”bottom”<br><br><strong>可能的值</strong><br>top    默认值。把表格标题定位在表格之上。<br>bottom    把表格标题定位在表格之下。<br>inherit    规定应该从父元素继承 caption-side 属性的值。<br><br>### empty-cells<br><strong>实例</strong><br>隐藏表格中空单元格上的边框和背景：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>:separate;</span><br><span class="line">  <span class="attribute">empty-cells</span>:hide;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>empty-cells 属性设置是否显示表格中的空单元格（仅用于“分离边框”模式）。<br><br>注释：某些版本的 IE 浏览器不支持此属性。<br><br><strong>说明</strong><br>该属性定义了不包含任何内容的表单元格如何表示。如果显示，就会绘制出单元格的边框和背景。除非 border-collapse 设置为 separate，否则将忽略这个属性。<br><br>默认值：    show<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.emptyCells=”hide”<br><br><strong>可能的值</strong><br>hide     指定当表格的单元格无内容时，隐藏该单元格的边框。<br>show    指定当表格的单元格无内容时，显示该单元格的边框。默认。<br>inherit    规定应该从父元素继承 empty-cells 属性的值。<br><img src="http://shengyihua.top/css/181002/7CfdfiJ61i.png?imageslim" alt="mark"><br><br>## 内容(Content)<br><br>### content<br><strong>实例</strong><br>下面的例子在每个链接后插入括号中的 URL：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:after</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" ("</span> <span class="built_in">attr</span>(href) <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。<br><br><strong>说明</strong><br>该属性用于定义元素之前或之后放置的生成内容。默认地，这往往是行内内容，不过该内容创建的框类型可以用属性 display 控制。<br><br>默认值：    normal<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.content=”url(beep.wav)”<br><br><strong>可能的值</strong><br>none<br>normal<br>inherit    规定应该从父元素继承 content 属性的值。<br><br>### counter-increment<br><strong>实例</strong><br>对部分和子部分进行编号（比如 “Section 1”、”1.1”、”1.2”）的方法：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>:section;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>:subsection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"Section "</span> <span class="built_in">counter</span>(section) <span class="string">". "</span>;</span><br><span class="line">  <span class="attribute">counter-increment</span>:section;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">:before</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>:subsection;</span><br><span class="line">  <span class="attribute">content</span>:<span class="built_in">counter</span>(section) <span class="string">"."</span> <span class="built_in">counter</span>(subsection) <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>counter-increment 属性设置某个选取器每次出现的计数器增量。默认增量是 1。<br><br><strong>说明</strong><br>利用这个属性，计数器可以递增（或递减）某个值，这可以是正值或负值。如果没有提供 number 值，则默认为 1。<br><br>注释：如果使用了 “display: none”，则无法增加计数。如使用 “visibility: hidden”，则可增加计数。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.counterIncrement=”subsection”<br><br><strong>可能的值</strong><br>none    默认。选择器无计数器增量。<br>id number    id 定义将增加计数的选择器、id 或 class。number 定义增量。number 可以是正数、零或者负数。<br>inherit    规定应该从父元素继承 counter-increment 属性的值。<br><br>### counter-reset<br><strong>实例</strong><br>对部分和子部分进行编号（比如 “Section 1”、”1.1”、”1.2”）的方法：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>:section;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>:subsection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"Section "</span> <span class="built_in">counter</span>(section) <span class="string">". "</span>;</span><br><span class="line">  <span class="attribute">counter-increment</span>:section;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">:before</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>:subsection;</span><br><span class="line">  <span class="attribute">content</span>:<span class="built_in">counter</span>(section) <span class="string">"."</span> <span class="built_in">counter</span>(subsection) <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>counter-reset 属性设置某个选择器出现次数的计数器的值。默认为 0。<br>利用这个属性，计数器可以设置或重置为任何值，可以是正值或负值。如果没有提供 number，则默认为 0。<br>注释：如果使用 “display: none”，则无法重置计数器。如果使用 “visibility: hidden”，则可以重置计数器。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.counterReset=”subsection”<br><br><strong>可能的值</strong><br>none    默认。不能对选择器的计数器进行重置。<br>id number<br>id 定义重置计数器的选择器、id 或 class。number 可设置此选择器出现次数的计数器的值。可以是正数、零或负数。<br>inherit    规定应该从父元素继承 counter-reset 属性的值。<br><br>### 计数器的应用<br><br>例如我们有这样的一个结构<br><br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;div&gt;</span> </span><br><span class="line">  </span><br><span class="line">  <span class="section">&lt;div&gt;</span><span class="attribute">term</span></span><br><span class="line">   <span class="section">&lt;div&gt;</span></span><br><span class="line">     <span class="attribute">definition</span></span><br><span class="line">  <span class="section">&lt;/div&gt;</span></span><br><span class="line">  <span class="section">&lt;/div&gt;</span> </span><br><span class="line"> </span><br><span class="line">   <span class="section">&lt;div&gt;</span><span class="attribute">term</span></span><br><span class="line">   <span class="section">&lt;div&gt;</span></span><br><span class="line">     <span class="attribute">definition</span></span><br><span class="line">  <span class="section">&lt;/div&gt;</span></span><br><span class="line">  <span class="section">&lt;/div&gt;</span> </span><br><span class="line">  </span><br><span class="line"> <span class="section">&lt;div&gt;</span><span class="attribute">term</span></span><br><span class="line">   <span class="section">&lt;div&gt;</span></span><br><span class="line">    <span class="attribute">definition</span></span><br><span class="line">  <span class="section">&lt;/div&gt;</span></span><br><span class="line">  <span class="section">&lt;/div&gt;</span> </span><br><span class="line">  </span><br><span class="line">  <span class="section">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><br>给每个div加了left-padding之后默认看到的样子是<br><img src="http://shengyihua.top/css/181005/lmIeKj05de.png?imageslim" alt="mark"><br>显然这不是我们想要的效果，希望在dt前面有数字标识符，比如说1、2、3等等。<br><br>第一步实现：<br><img src="http://shengyihua.top/css/181005/DI9E915G5j.png?imageslim" alt="mark"><br>但是这样做的话嵌套层级比较深的话就难以处理，因为嵌套里面的要拼接，通过counters来做就简洁很多啦，counters()方法。看似值多了个字母s, 但表意大变身。counters几乎可以说是嵌套计数的代名词。我们平时的序号，不可能就只是1,2,3,4,.., 还会有诸如 1.1,1.2,1.3,…等的子序号。得，前者就是counter()干的事情，后者就是counters()干的事情。<br>基本用法为：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counters(<span class="built_in">name</span>, <span class="built_in">string</span>);</span><br></pre></td></tr></table></figure><br><br>其中，string参数为字符串（需要引号包围的）（必须参数），表示子序号的连接字符串。例如1.1的string就是. 1-1的就是-<br><img src="http://shengyihua.top/css/181005/g4E32527Kd.png?imageslim" alt="mark"><br><br>#### counters分析<br>第一个案例：<br><br>css<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.reset</span> &#123; <span class="attribute">padding-left</span>: <span class="number">20px</span>; <span class="attribute">counter-reset</span>: wangxiaoer; <span class="attribute">line-height</span>: <span class="number">1.6</span>; <span class="attribute">color</span>: <span class="number">#666</span>; &#125;</span><br><span class="line"><span class="selector-class">.counter</span><span class="selector-pseudo">:before</span> &#123; <span class="attribute">content</span>: <span class="built_in">counters</span>(wangxiaoer, <span class="string">'-'</span>) <span class="string">'. '</span>; <span class="attribute">counter-increment</span>: wangxiaoer; <span class="attribute">font-family</span>: arial black; &#125;</span><br><span class="line"><span class="selector-class">.reset</span> ~ <span class="selector-class">.counter</span> &#123; <span class="attribute">color</span>: <span class="number">#cd0000</span>; &#125;</span><br></pre></td></tr></table></figure><br><br>html<br><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;         </span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"counter"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><br><br> 效果图：<br> <img src="http://shengyihua.top/css/181005/F0l6jf27EF.png?imageslim" alt="mark"><br><br>分析<br><br>我们可以把页面结果理解成一棵树<br><img src="http://shengyihua.top/css/181005/Ec92C7ml3d.png?imageslim" alt="mark"><br><img src="http://shengyihua.top/css/181005/EE9hi1KjHJ.png?imageslim" alt="mark"><br><br>第二个案例<br>如果理解上上面我画的，那么从下面的代码可以分析出编号<br><img src="http://shengyihua.top/css/181005/d3mCgjfAGF.png?imageslim" alt="mark"><br><br>答案是<br><img src="http://shengyihua.top/css/181005/bchFhGLdGb.png?imageslim" alt="mark"><br><br>分析图是<br><img src="http://shengyihua.top/css/181005/7f83E3emKG.png?imageslim" alt="mark"><br><br>总结：<br>    一个容器里的reset是唯一的，所以，如果你不小心把计数显示和技术reset元素以兄弟元素形式放在一起（虽然HTML内容布局呈现是没有异常的），就很可能会出现计数序号乱入的情况。所以最好的情况就是不要以兄弟元素放一起啦！<br><br>还有不懂的可以参考<a href="https://www.zhangxinxu.com/wordpress/2014/08/css-counters-automatic-number-content/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2014/08/css-counters-automatic-number-content/</a><br><br>## 定位(Positioning)<br><br>### position<br><strong>实例</strong><br>定位 h2 元素：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>position 属性规定元素的定位类型。<br><br><strong>说明</strong><br>这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。<br><br>默认值：    static<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.position=”absolute”<br><br><strong>可能的值</strong><br>absolute    生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。<br>fixed 生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。<br>relative    生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。<br>static    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。<br>inherit    规定应该从父元素继承 position 属性的值。<br><br>### z-index<br><strong>实例</strong><br>设置图像的 z-index：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。<br><br>注释：元素可拥有负的 z-index 属性值。<br><br>注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）！<br><br><strong>说明</strong><br>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。<br><br>默认值：    auto<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.zIndex=”1”<br><br><strong>可能的值</strong><br>auto    默认。堆叠顺序与父元素相等。<br>number    设置元素的堆叠顺序。<br>inherit    规定应该从父元素继承 z-index 属性的值。<br><br>### top<br><strong>实例</strong><br>把图像的上边缘设置在其包含元素上边缘之下 5 像素高的位置：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>top 属性规定元素的顶部边缘。该属性定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。<br><br>注释：如果 “position” 属性的值为 “static”，那么设置 “top” 属性不会产生任何效果。<br><br><strong>说明</strong><br>对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto。<br><br>对于相对定义元素，如果 top 和 bottom 都是 auto，其计算值则都是 0；如果其中之一为 auto，则取另一个值的相反数；如果二者都不是 auto，bottom 将取 top 值的相反数。<br><br>默认值：    auto<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.top=”50px”<br><br><strong>可能的值</strong><br>auto    默认值。通过浏览器计算上边缘的位置。<br>%    设置以包含元素的百分比计的上边位置。可使用负值。<br>length    使用 px、cm 等单位设置元素的上边位置。可使用负值。<br>inherit    规定应该从父元素继承 top 属性的值。<br><br>### right<br><strong>实例</strong><br>把图像的右边缘设置在其包含元素右边缘向左 5 像素的位置：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">right</span>:<span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>right 属性规定元素的右边缘。该属性定义了定位元素右外边距边界与其包含块右边界之间的偏移。<br><br>注释：如果 “position” 属性的值为 “static”，那么设置 “right” 属性不会产生任何效果。<br><br><strong>说明</strong><br>对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto。<br><br>对于相对定义元素，left 的计算值始终等于 right。<br><br>默认值：    auto<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.right=”50px”<br><br><strong>可能的值</strong><br>auto    默认值。通过浏览器计算右边缘的位置。<br>%    设置以包含元素的百分比计的右边位置。可使用负值。<br>length    使用 px、cm 等单位设置元素的右边位置。可使用负值。<br>inherit    规定应该从父元素继承 right 属性的值。<br><br>### bottom<br><strong>实例</strong><br>把图像的底边缘设置在其包含元素底边缘之上 5 像素高的位置：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>bottom 属性规定元素的底部边缘。该属性定义了定位元素下外边距边界与其包含块下边界之间的偏移。<br><br>注释：如果 “position” 属性的值为 “static”，那么设置 “bottom” 属性不会产生任何效果。<br><br><strong>说明</strong><br>对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto。<br><br>对于相对定义元素，如果 bottom 和 top 都是 auto，其计算值则都是 0；如果其中之一为 auto，则取另一个值的相反数；如果二者都不是 auto，bottom 将取 top 值的相反数。<br><br>默认值：    auto<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.bottom=”50px”<br><br><strong>可能的值</strong><br>auto    默认值。通过浏览器计算底部的位置。<br>%    设置以包含元素的百分比计的底边位置。可使用负值。<br>length    使用 px、cm 等单位设置元素的底边位置。可使用负值。<br>inherit    规定应该从父元素继承 bottom 属性的值。<br><br>### left<br><strong>实例</strong><br>把图像的左边缘设置在其包含元素左边缘向右 100 像素的位置：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>left 属性规定元素的左边缘。该属性定义了定位元素左外边距边界与其包含块左边界之间的偏移。<br><br>注释：如果 “position” 属性的值为 “static”，那么设置 “left” 属性不会产生任何效果。<br><br><strong>说明</strong><br>对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto。<br><br>对于相对定义元素，left 的计算值始终等于 right。<br><br>默认值：    auto<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.left=”100px”<br><br><strong>可能的值</strong><br>auto    默认值。通过浏览器计算左边缘的位置。<br>%    设置以包含元素的百分比计的左边位置。可使用负值。<br>length    使用 px、cm 等单位设置元素的左边位置。可使用负值。<br>inherit    规定应该从父元素继承 left 属性的值。<br><br>## 布局(Layout)<br><br>### display<br><strong>实例</strong><br>使段落生出行内框：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.inline</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br><br> <strong>定义和用法</strong><br>display 属性规定元素应该生成的框的类型。<br><br><strong>说明</strong><br>这个属性用于定义建立布局时元素生成的显示框类型。对于 HTML 等文档类型，如果使用 display 不谨慎会很危险，因为可能违反 HTML 中已经定义的显示层次结构。对于 XML，由于 XML 没有内置的这种层次结构，所有 display 是绝对必要的。<br><br>注释：CSS2 中有值 compact 和 marker，不过由于缺乏广泛的支持，已经从 CSS2.1 中去除了。<br><br>默认值：    inline<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.display=”inline”<br><br><strong>可能的值</strong><br>none    此元素不会被显示。<br>block    此元素将显示为块级元素，此元素前后会带有换行符。<br>inline    默认。此元素会被显示为内联元素，元素前后没有换行符。<br>inline-block    行内块元素。（CSS2.1 新增的值）<br>list-item    此元素会作为列表显示。<br>run-in    此元素会根据上下文作为块级元素或内联元素显示。<br>compact    CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。<br>marker    CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。<br>table    此元素会作为块级表格来显示（类似<code>&lt;table&gt;</code>），表格前后带有换行符。<br>inline-table    此元素会作为内联表格来显示（类似 <code>&lt;table&gt;</code>），表格前后没有换行符。<br>table-row-group    此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tbody&gt;</code>）。<br>table-header-group    此元素会作为一个或多个行的分组来显示（类似 <code>&lt;thead&gt;</code>）。<br>table-footer-group    此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tfoot&gt;</code>）。<br>table-row    此元素会作为一个表格行显示（类似 <code>&lt;tr&gt;</code>）。<br>table-column-group    此元素会作为一个或多个列的分组来显示（类似 <code>&lt;colgroup&gt;</code>）。<br>table-column    此元素会作为一个单元格列显示（类似 <code>&lt;col&gt;</code>）<br>table-cell    此元素会作为一个表格单元格显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code>）<br>table-caption    此元素会作为一个表格标题显示（类似 <code>&lt;caption&gt;</code>）<br>inherit    规定应该从父元素继承 display 属性的值。<br><br>### float<br><strong>实例</strong><br>把图像向右浮动：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">float</span>:right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。<br><br>如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。<br><br>注释：假如在一行之上只有极少的空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.cssFloat=”left”<br><br><strong>可能的值</strong><br>left    元素向左浮动。<br>right    元素向右浮动。<br>none    默认值。元素不浮动，并会显示在其在文本中出现的位置。<br>inherit    规定应该从父元素继承 float 属性的值。<br>### clear<br><strong>实例</strong><br>图像的左侧和右侧均不允许出现浮动元素：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>clear 属性规定元素的哪一侧不允许其他浮动元素。<br><br><strong>说明</strong><br>clear 属性定义了元素的哪边上不允许出现浮动元素。在 CSS1 和 CSS2 中，这是通过自动为清除元素（即设置了 clear 属性的元素）增加上外边距实现的。在 CSS2.1 中，会在元素上外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.clear=”left”<br><br><strong>可能的值</strong><br>left    在左侧不允许浮动元素。<br>right    在右侧不允许浮动元素。<br>both    在左右两侧均不允许浮动元素。<br>none    默认值。允许浮动元素出现在两侧。<br>inherit    规定应该从父元素继承 clear 属性的值。<br><br>### visibility<br><strong>实例</strong><br>使 h2 元素不可见：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">visibility</span>:hidden;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>visibility 属性规定元素是否可见。<br><br>提示：即使不可见的元素也会占据页面上的空间。请使用 “display” 属性来创建不占据页面空间的不可见元素。<br><br><strong>说明</strong><br>这个属性指定是否显示一个元素生成的元素框。这意味着元素仍占据其本来的空间，不过可以完全不可见。值 collapse 在表中用于从表布局中删除列或行。<br><br>默认值：    visible<br>继承性：    yes<br>版本：    CSS2<br>JavaScript 语法：    object.style.visibility=”hidden”<br><br><strong>可能的值</strong><br>visible    默认值。元素是可见的。<br>hidden    元素是不可见的。<br>collapse    当在表格元素中使用时，此值可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 “hidden”。<br>inherit    规定应该从父元素继承 visibility 属性的值。<br><br>### overflow<br><strong>实例</strong><br>设置 overflow 属性：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:scroll;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>overflow 属性规定当内容溢出元素框时发生的事情。<br><br><strong>说明</strong><br>这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。<br><br>默认值：    visible<br>继承性：    no<br>版本：    CSS2<br>JavaScript 语法：    object.style.overflow=”scroll”<br><br><strong>可能的值</strong><br>visible    默认值。内容不会被修剪，会呈现在元素框之外。<br>hidden    内容会被修剪，并且其余内容是不可见的。<br>scroll    内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。滚动条是一直存在的。<br>auto    如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。滚动条只有在内容超出的时候才会自动出现。<br>inherit    规定应该从父元素继承 overflow 属性的值。<br><br>## 过渡(Transition)<br><br>### transition<br><strong>实例</strong><br>把鼠标指针放到 div 元素上，其宽度会从 100px 逐渐变为 300px：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">2s</span>;</span><br><span class="line"><span class="attribute">-moz-transition</span>: width <span class="number">2s</span>; <span class="comment">/* Firefox 4 */</span></span><br><span class="line"><span class="attribute">-webkit-transition</span>: width <span class="number">2s</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-transition</span>: width <span class="number">2s</span>; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transition 属性是一个简写属性，用于设置四个过渡属性：<br><br>transition-property<br>transition-duration<br>transition-timing-function<br>transition-delay<br>注释：请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。<br><br>默认值：    all 0 ease 0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transition=”width 2s”<br><br><strong>语法</strong><br><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition: <span class="keyword">property</span><span class="title"> </span>duration timing-function delay;</span><br></pre></td></tr></table></figure><br><br>| 值| 描述|<br>| :——– | ——–:|<br>| transition-property    |   规定设置过渡效果的 CSS 属性的名称。<br>| transition-duration    |  规定完成过渡效果需要多少秒或毫秒。<br>| transition-timing-function    |   规定速度效果的速度曲线。<br>| transition-delay    |   定义过渡效果何时开始。<br><br>### transition-property<br><strong>实例</strong><br>把鼠标指针放到 div 元素上，会产生带有平滑改变元素宽度的过渡效果：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transition-property</span>:width;</span><br><span class="line"><span class="attribute">-moz-transition-property</span>: width; <span class="comment">/* Firefox 4 */</span></span><br><span class="line"><span class="attribute">-webkit-transition-property</span>:width; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-transition-property</span>:width; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transition-property 属性规定应用过渡效果的 CSS 属性的名称。（当指定的 CSS 属性改变时，过渡效果将开始）。<br><br>提示：过渡效果通常在用户将鼠标指针浮动到元素上时发生。<br><br>注释：请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。<br><br>默认值：    all<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transitionProperty=”width,height”<br><br><strong>语法</strong><br><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-<span class="keyword">property</span><span class="title"></span>: none|all|<span class="keyword">property</span><span class="title"></span>;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>none    没有属性会获得过渡效果。<br>all    所有属性都将获得过渡效果。<br>property    定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔。<br><br>### transition-duration<br><strong>实例</strong><br>让过渡效果持续 5 秒：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">5s</span>;</span><br><span class="line"><span class="attribute">-moz-transition-duration</span>: <span class="number">5s</span>; <span class="comment">/* Firefox 4 */</span></span><br><span class="line"><span class="attribute">-webkit-transition-duration</span>: <span class="number">5s</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-transition-duration</span>: <span class="number">5s</span>; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transition-duration 属性规定完成过渡效果需要花费的时间（以秒或毫秒计）。<br><br>默认值：    0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transitionDuration=”5s”<br><br><strong>语法</strong><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-duration</span>: time;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>time     规定完成过渡效果需要花费的时间（以秒或毫秒计）。默认值是 0，意味着不会有效果。<br><br>### transition-timing-function<br><strong>实例</strong><br>以相同的速度从开始到结束的过渡效果：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"><span class="attribute">-moz-transition-timing-function</span>: linear; <span class="comment">/* Firefox 4 */</span></span><br><span class="line"><span class="attribute">-webkit-transition-timing-function</span>: linear; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-transition-timing-function</span>: linear; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transition-timing-function 属性规定过渡效果的速度曲线。<br><br>该属性允许过渡效果随着时间来改变其速度。<br><br>默认值：    ease<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transitionTimingFunction=”linear”<br><br><strong>语法</strong><br><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transition-timing-function: linear|<span class="type">ease</span>|<span class="type">ease</span>-<span class="built_in">in</span>|<span class="type">ease</span>-out|<span class="type">ease</span>-<span class="built_in">in</span>-out|<span class="type">cubic</span>-</span><br><span class="line">bezier(n,n,n,n);</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>linear    规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。<br>ease    规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。<br>ease-in    规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。<br>ease-out    规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。<br>ease-in-out    规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。<br>cubic-bezier(n,n,n,n)    在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数。<br><br>### transition-delay<br><strong>实例</strong><br>在过渡效果开始前等待 2 秒：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line"><span class="attribute">-moz-transition-delay</span>: <span class="number">2s</span>; <span class="comment">/* Firefox 4 */</span></span><br><span class="line"><span class="attribute">-webkit-transition-delay</span>: <span class="number">2s</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-transition-delay</span>: <span class="number">2s</span>; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transition-delay 属性规定过渡效果何时开始。<br><br>transition-delay 值以秒或毫秒计。<br><br>默认值：    0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transitionDelay=”2s”<br><br><strong>语法</strong><br><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-<span class="built_in">delay</span>: <span class="built_in">time</span>;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>time    规定在过渡效果开始之前需要等待的时间，以秒或毫秒计。<br><br>### transition的坑<br><br> 1. 在元素首次渲染还没有完成的情况下,是不会触发过渡的（js里面操作过渡的语句放到onload事件里面去）<br> 2. 在绝大部分变换样式切换时,如果变换函数的位置 个数不相同也不会触发过渡（用js的时候要注意）<br><br> 3. &gt;     transition-property              指定过渡动画的属性（并不是所有的属性都可以动画）<br>    &gt; transition-duration             指定过渡动画的时间（0也要带单位）如果transition-property列表比较长，就重复transition-duration<strong>列表</strong>从而达到一一对应<br>    &gt; transition-timing-function             指定过渡动画的形式（贝塞尔） 如果transition-property列表比较长，就重复transition-timing-function为<strong>ease</strong>从而达到一一对应<br>    &gt; transition-delay                指定过渡动画的延迟     如果transition-property列表比较长，就重复transition-delay<strong>列表</strong>从而达到一一对应<br>    &gt; transition             第一个可以被解析成时间的值会赋给transition-duration<br>    &gt;     transtionend事件（DOM2）             在每个属性完成过渡时都会触发这个事件<br>    &gt;  当属性值的列表长度不一致时,跟时间有关的重复列表,transition-timing-function使用默认值<br> 4. 分析<br> <code>hover</code>之后<code>width</code>直接变，<code>height</code>过渡。离开之后<code>height</code>立即变，<code>width</code>过渡。这是因为<code>hover</code>之后<code>transition</code>会覆盖之前的，离开了就不覆盖了。<br>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: height <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## 变换(Transform)<br><br>### transform<br><strong>实例</strong><br><br>旋转 div 元素：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(7deg);</span><br><span class="line"><span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* IE 9 */</span></span><br><span class="line"><span class="attribute">-moz-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transform=”rotate(7deg)”<br><br><strong>语法</strong><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>: none|<span class="built_in">transform</span>-<span class="built_in">functions</span>;</span><br></pre></td></tr></table></figure><br><br><strong>取值</strong><br>none：无转换<br><font color="red">2D Transform Functions:</font><br>matrix()：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵<br>translate()：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0<br>translatex()：指定对象X轴（水平方向）的平移<br>translatey()：指定对象Y轴（垂直方向）的平移<br>rotate()：指定对象的2D rotation（2D旋转），需先有 &lt;’ transform-origin ‘&gt; 属性的定义<br>scale()：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值<br>scalex()：指定对象X轴的（水平方向）缩放<br>scaley()：指定对象Y轴的（垂直方向）缩放<br>skew()：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0<br>skewx()：指定对象X轴的（水平方向）扭曲<br>skewy()：指定对象Y轴的（垂直方向）扭曲<br><font color="red">3D Transform Functions:</font><br>matrix3d()：以一个4x4矩阵的形式指定一个3D变换<br>translate3d()：指定对象的3D位移。第1个参数对应X轴，第2个参数对应Y轴，第3个参数对应Z轴，参数不允许省略<br>translatez()：指定对象Z轴的平移<br>rotate3d()：指定对象的3D旋转角度，其中前3个参数分别表示旋转的方向x,y,z，第4个参数表示旋转的角度，参数不允许省略<br>rotatex()：指定对象在x轴上的旋转角度<br>rotatey()：指定对象在y轴上的旋转角度<br>rotatez()：指定对象在z轴上的旋转角度<br>scale3d()：指定对象的3D缩放。第1个参数对应X轴，第2个参数对应Y轴，第3个参数对应Z轴，参数不允许省略<br>scalez()：指定对象的z轴缩放<br>perspective()：指定透视距离<br><font color="red">注意</font><br>transform的变换组合，意思是transform可以同时写多个值，例如<code>transform:translate(10px) rotate(90deg);</code>其变换的底层其实就是矩阵的运算，顺序是从右往左的，<code>transform:translate(10px) rotate(90deg);</code>底层就是把坐标矩阵乘以<code>rotate(90deg)</code>的矩阵再乘以<code>translate(10px)</code>的矩阵得到最终的坐标,但是我们可以从左往右理解,如<code>transform: translateX(100px) scale(.5);</code>可以理解成先移动100px然后缩放，而<code>transform: scale(.5) translateX(100px);</code>则可以理解成坐标系整体缩小0.5倍，再移动50px（因为坐标系缩小了，所以移动100px就变成50px了）。<br><br>### transform-origin<br><strong>实例</strong><br>设置旋转元素的基点位置：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line"><span class="attribute">transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg); <span class="comment">/* IE 9 */</span></span><br><span class="line"><span class="attribute">-ms-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>; <span class="comment">/* IE 9 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-webkit-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);<span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">-moz-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;<span class="comment">/* Firefox */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);<span class="comment">/* Opera */</span></span><br><span class="line"><span class="attribute">-o-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;<span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transform-origin 属性允许您改变被转换元素的位置。<br><br>2D 转换元素能够改变元素 x 和 y 轴。3D 转换元素还能改变其 Z 轴。<br><br>注释：该属性必须与 transform 属性一同使用。<br><br>为了更好地理解 transform 属性，请查看这个演示。<br><br>默认值：    50% 50% 0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transformOrigin=”20% 40%”<br><br><strong>语法</strong><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>-<span class="built_in">origin</span>: x-axis y-axis z-axis;</span><br></pre></td></tr></table></figure><br><br>| 值|     描述|<br>| :——– | ——–:|<br>| x-axis    |   定义视图被置于 X 轴的何处。可能的值：left、center、right、length、% |<br>| y-axis    |   定义视图被置于 y 轴的何处。可能的值：left、center、right、length、% |<br>| z-axis    |   定义视图被置于 z 轴的何处。可能的值：length |<br><br><br>### transform-style<br><strong>实例</strong><br>使被转换的子元素保留其 3D 转换：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(60deg);</span><br><span class="line"><span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(60deg);<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。<br><br>注释：该属性必须与 transform 属性一同使用。<br><br>默认值：    flat<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.transformStyle=”preserve-3d”<br><br><strong>语法</strong><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>-<span class="built_in">style</span>: flat|preserve-3d;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>flat    子元素将不保留其 3D 位置。<br>preserve-3d    子元素将保留其 3D 位置。<br><br>### perspective<br><strong>实例</strong><br>设置元素被查看位置的视图：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">perspective</span>: <span class="number">500</span>;</span><br><span class="line"><span class="attribute">-webkit-perspective</span>: <span class="number">500</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>perspective 属性定义 3D 元素距视图的距离，以像素计。该属性允许您改变 3D 元素查看 3D 元素的视图。<br><br>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。<br><br>注释：perspective 属性只影响 3D 转换元素。<br><br>提示：请与 perspective-origin 属性一同使用该属性，这样您就能够改变 3D 元素的底部位置。<br><br>默认值：    none<br>继承性：    yes<br>版本：    CSS3<br>JavaScript 语法：    object.style.perspective=500<br><br><strong>语法</strong><br><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perspective: <span class="keyword">number</span>|<span class="keyword">none</span>;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>number    元素距离视图的距离，以像素计。<br>none    默认值。与 0 相同。不设置透视。<br><br>### perspective-origin<br><strong>实例</strong><br>设置 3D 元素的基点位置：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">perspective</span>:<span class="number">150</span>;</span><br><span class="line"><span class="attribute">perspective-origin</span>: <span class="number">10%</span> <span class="number">10%</span>;</span><br><span class="line"><span class="attribute">-webkit-perspective</span>:<span class="number">150</span>;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-webkit-perspective-origin</span>: <span class="number">10%</span> <span class="number">10%</span>;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>perspective-origin 属性定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置。<br><br>当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身。<br><br>注释：该属性必须与 perspective 属性一同使用，而且只影响 3D 转换元素。<br><br>默认值：    50% 50%<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.perspectiveOrigin=”10% 10%”<br><br><strong>语法</strong><br><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perspective-<span class="keyword">origin: </span>x-axis y-axis<span class="comment">;</span></span><br></pre></td></tr></table></figure><br><br>| 值 |     描述|<br>| :——– | ——–:|<br>| x-axis    |   定义该视图在 x 轴上的位置。默认值：50%。。可能的值：left、center、right、length、% |<br>| y-axis    |   定义该视图在 y 轴上的位置。默认值：50%。。可能的值：left、center、right、length、% |<br><br>### backface-visibility<br><strong>实例</strong><br>隐藏被旋转的 div 元素的背面：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">backface-visibility</span>:hidden;</span><br><span class="line"><span class="attribute">-webkit-backface-visibility</span>:hidden;<span class="comment">/* Chrome 和 Safari */</span></span><br><span class="line"><span class="attribute">-moz-backface-visibility</span>:hidden; <span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">-ms-backface-visibility</span>:hidden; <span class="comment">/* Internet Explorer */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>backface-visibility 属性定义当元素不面向屏幕时是否可见。<br><br>如果在旋转元素不希望看到其背面时，该属性很有用。<br><br>默认值：    visible<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.backfaceVisibility=”hidden”<br><br><strong>语法</strong><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">backface-visibility</span>: visible|hidden;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>visible    背面是可见的。<br>hidden    背面是不可见的。<br><br>### 注意<br>perspective-origin是确定眼睛x、y的坐标，perspective是确定眼睛的z坐标，两个属性组合在一起就能确定眼睛的位置，虽然子元素也能自己设置perspective，但是不要那么做，记住最简单的原则，在包裹父元素上设置perspective、perspective-origin；在子元素上设置transform、transform-origin就可以了。如果一个元素需要让子元素是（看起来）位于三维空间内，那就设置该元素transform-style，顺带可以设置其背面不可见。还有perspective是一个不可继承属性，但他可以作用于所有的后代元素，而且perspective会叠加，爷爷元素和父亲元素会叠加到孙子的。transform-style是一个不可继承属性，他只作用于<strong>直接后代子元素</strong>。你在body设置，wrap里面的inner没效果。<br>绕着X轴转顺时针为正值逆时针为负值；绕着Y轴转顺时针为负值逆时针为正值；<br><a href="https://www.jb51.net/css/462429.html" target="_blank" rel="noopener">详解CSS3的perspective属性设置3D变换距离的方法</a><br><br>## 动画(Animation)<br><br>### animation<br><strong>实例</strong><br>使用简写属性，将动画与 div 元素绑定：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation</span>:mymove <span class="number">5s</span> infinite;</span><br><span class="line"><span class="attribute">-webkit-animation</span>:mymove <span class="number">5s</span> infinite; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation 属性是一个简写属性，用于设置六个动画属性：<br><br>1. animation-name<br>2. animation-duration<br>3. animation-timing-function<br>4. animation-delay<br>5. animation-iteration-count<br>6. nimation-direction<br><br>注释：请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。<br><br>默认值：    none 0 ease 0 1 normal<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animation=”mymove 5s infinite”<br><br><strong>语法</strong><br><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation: <span class="keyword">name</span> duration timing-<span class="function"><span class="keyword">function</span></span> delay iteration-<span class="built_in">count</span> direction;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>animation-name    规定需要绑定到选择器的 keyframe 名称。。<br>animation-duration    规定完成动画所花费的时间，以秒或毫秒计。<br>animation-timing-function    规定动画的速度曲线。<br>animation-delay    规定在动画开始之前的延迟。<br>animation-iteration-count    规定动画应该播放的次数。<br>animation-direction    规定是否应该轮流反向播放动画。<br><br>### animation-name<br><strong>实例</strong><br>为 @keyframes 动画规定一个名称：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation</span>:mymove <span class="number">5s</span> infinite;</span><br><span class="line"><span class="attribute">-webkit-animation</span>:mymove <span class="number">5s</span> infinite; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-name 属性为 @keyframes 动画规定名称。<br><br>注释：请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationName=”mymove”<br><br><strong>语法</strong><br><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-<span class="keyword">name</span>: keyframename|<span class="keyword">none</span>;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>keyframename    规定需要绑定到选择器的 keyframe 的名称。<br>none    规定无动画效果（可用于覆盖来自级联的动画）。<br><br>### animation-duration<br><strong>实例</strong><br>为 @keyframes 动画规定一个名称：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation-duration</span>:<span class="number">2s</span>;</span><br><span class="line"><span class="attribute">-webkit-animation-duration</span>:<span class="number">2s</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-duration 属性定义动画完成一个周期所需要的时间，以秒或毫秒计。<br><br>默认值：    0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationDuration=”3s”<br><br><strong>语法</strong><br><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">animation</span>-duration: <span class="built_in">time</span>;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>time    规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。<br><br>### animation-timing-function<br><strong>实例</strong><br>从开头到结尾以相同的速度来播放动画：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation-timing-function</span>:<span class="number">2s</span>;</span><br><span class="line"><span class="attribute">-webkit-animation-timing-function</span>:<span class="number">2s</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-timing-function 规定动画的速度曲线。<br><br>速度曲线定义动画从一套 CSS 样式变为另一套所用的时间。<br><br>速度曲线用于使变化更为平滑。<br><br>默认值：    ease<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationTimingFunction=”linear”<br><br><strong>语法</strong><br><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-timing-<span class="function"><span class="keyword">function</span>: value</span>;</span><br></pre></td></tr></table></figure><br><br>animation-timing-function 使用名为三次贝塞尔（Cubic Bezier）函数的数学函数，来生成速度曲线。您能够在该函数中使用自己的值，也可以预定义的值：<br><br><strong>值    描述</strong><br>linear    动画从头到尾的速度是相同的。<br>ease    默认。动画以低速开始，然后加快，在结束前变慢。<br>ease-in    动画以低速开始。<br>ease-out    动画以低速结束。<br>ease-in-out    动画以低速开始和结束。<br>cubic-bezier(n,n,n,n)    在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。<br><br>### animation-delay<br><strong>实例</strong><br>等待两秒，然后开始动画：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation-delay</span>:<span class="number">2s</span>;</span><br><span class="line"><span class="attribute">-webkit-animation-delay</span>:<span class="number">2s</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-delay 属性定义动画何时开始。<br><br>animation-delay 值以秒或毫秒计。<br><br>提示：允许负值，-2s 使动画马上开始，但跳过 2 秒进入动画。<br><br>默认值：    0<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationDelay=”2s”<br><br><strong>语法</strong><br>animation-delay: time;<br><br><strong>值    描述</strong><br>time    可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。<br><br><br>### animation-iteration-count<br><strong>实例</strong><br>播放动画三次：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation-iteration-count</span>:<span class="number">3</span>;</span><br><span class="line"><span class="attribute">-webkit-animation-iteration-count</span>:<span class="number">3</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-iteration-count 属性定义动画的播放次数。<br><br>默认值：    1<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationIterationCount=3<br><br><strong>语法</strong><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-iteration-count</span>: n|infinite;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>n    定义动画播放次数的数值。<br>infinite    规定动画应该无限次播放。<br><br><br>### animation-direction<br><strong>实例</strong><br>暂停动画：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation-direction</span>:alternate;</span><br><span class="line"><span class="attribute">-webkit-animation-direction</span>:alternate; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-direction 属性定义是否应该轮流反向播放动画。<br><br>如果 animation-direction 值是 “alternate”，则动画会在奇数次数（1、3、5 等等）正常播放，而在偶数次数（2、4、6 等等）向后播放。<br><br>注释：如果把动画设置为只播放一次，则该属性没有效果。<br><br>默认值：    normal<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationDirection=”alternate”<br><br><strong>语法</strong><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-direction</span>: normal|alternate;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>normal：默认值。动画应该正常播放。<br>reverse：反方向运行<br>alternate：动画先正常运行再反方向运行，并持续交替运行<br>alternate-reverse：动画先反运行再正方向运行，并持续交替运行<br><br><br>### animation-play-state<br><strong>实例</strong><br>暂停动画：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation-play-state</span>:paused;</span><br><span class="line"><span class="attribute">-webkit-animation-play-state</span>:paused; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><strong>定义和用法</strong><br>animation-play-state 属性规定动画正在运行还是暂停。<br><br>注释：您可以在 JavaScript 中使用该属性，这样就能在播放过程中暂停动画。<br><br>默认值：    running<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationPlayState=”paused”<br><br><strong>语法</strong><br><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-play-state</span>: paused|running;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>paused    规定动画已暂停。<br>running    规定动画正在播放。<br><br>### animation-fill-mode<br><strong>实例</strong><br>为 h1 元素规定填充模式：<br><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><br>  <strong>定义和用法</strong><br>animation-fill-mode 属性规定动画在播放之前或之后，其动画效果是否可见。<br><br>注释：其属性值是由逗号分隔的一个或多个填充模式关键词。<br><br>默认值：    none<br>继承性：    no<br>版本：    CSS3<br>JavaScript 语法：    object.style.animationFillMode=none<br><br><strong>语法</strong><br><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-fill-mode : none | <span class="type">forwards</span> | <span class="type">backwards</span> | <span class="type">both</span>;</span><br></pre></td></tr></table></figure><br><br><strong>值    描述</strong><br>none    不改变默认行为。<br>forwards    当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br>backwards    在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br>both    向前和向后填充模式都被应用。<br><br>### 注意<br>animation-duration控制整个动画的时长，animation-timing-function是应用于动画的每个小区间，里面的steps函数如果值是end 说明把那个小区间的时间全部花费在了开头瞬间，如果值是start说明把那个小区间的时间全部花费在了结尾瞬间，如果是类似于linear那些值说明时间是花在整个小区间里面的。<br><br>## 伸缩盒(Flexible Box)(新)<br><br>### flex-flow<br><strong>语法：</strong><br>flex-flow：&lt;’ flex-direction ‘&gt; || &lt;’ flex-wrap ‘&gt;<br><br>默认值：看各分拆属性<br><br>适用于：flex容器<br><br>继承性：无<br><br>动画性：否<br><br>计算值：指定值<br><br><strong>取值：</strong><br>&lt;’ flex-direction ‘&gt;：<br>定义弹性盒子元素的排列方向。<br>&lt;’ flex-wrap ‘&gt;：<br>控制flex容器是单行或者多行。<br><strong>说明：</strong><br>复合属性。设置或检索弹性盒模型对象的子元素排列方式。<br>对应的脚本特性为flexFlow。<br><br>### flex-direction<br><strong>语法：</strong><br>flex-direction：row | row-reverse | column | column-reverse<br><br>默认值：row<br><br>适用于：flex容器<br><br>继承性：无<br><br>动画性：否<br><br>计算值：指定值<br><br><strong>取值：</strong><br>row：<br>主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。<br>row-reverse：<br>对齐方式与row相反。<br>column：<br>主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。<br>column-reverse：<br>对齐方式与column相反。<br><strong>说明：</strong><br>该属性通过定义flex容器的主轴方向来决定felx子项在flex容器中的位置。这将决定flex需要如何进行排列<br>该属性的反转取值不影响元素的绘制，语音和导航顺序，只改变流动方向。这与 &lt;’ writing-mode ‘&gt; 和 &lt;’ direction ‘&gt; 相同。<br><br>### flex-wrap<br><strong>语法：</strong><br>flex-wrap：nowrap | wrap | wrap-reverse<br><br>默认值：nowrap<br><br>适用于：flex容器<br><br>继承性：无<br><br>动画性：否<br><br>计算值：指定值<br><br><strong>取值：</strong><br>nowrap：<br>flex容器为单行。该情况下flex子项可能会溢出容器<br>wrap：<br>flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行<br>wrap-reverse：<br>反转 wrap 排列。<br><strong>说明：</strong><br>该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。<br>对应的脚本特性为flexWrap。<br><br>### justify-content<br><strong>语法：</strong><br>justify-content：flex-start | flex-end | center | space-between | space-around<br><br>默认值：flex-start<br><br>适用于：flex容器<br><br>继承性：无<br><br>动画性：是<br><br>计算值：指定值<br><br><strong>取值：</strong><br>flex-start：<br>弹性盒子元素将向行起始位置对齐。该行的第一个子元素的主起始位置的边界将与该行的主起始位置的边界对齐，同时所有后续的伸缩盒项目与其前一个项目对齐。<br>flex-end：<br>弹性盒子元素将向行结束位置对齐。该行的第一个子元素的主结束位置的边界将与该行的主结束位置的边界对齐，同时所有后续的伸缩盒项目与其前一个项目对齐。<br>center：<br>弹性盒子元素将向行中间位置对齐。该行的子元素将相互对齐并在行中居中对齐，同时第一个元素与行的主起始位置的边距等同与最后一个元素与行的主结束位置的边距（如果剩余空间是负数，则保持两端相等长度的溢出）。<br>space-between：<br>弹性盒子元素会平均地分布在行里。如果最左边的剩余空间是负数，或该行只有一个子元素，则该值等效于’flex-start’。在其它情况下，第一个元素的边界与行的主起始位置的边界对齐，同时最后一个元素的边界与行的主结束位置的边距对齐，而剩余的伸缩盒项目则平均分布，并确保两两之间的空白空间相等。<br>space-around：<br>弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半。如果最左边的剩余空间是负数，或该行只有一个伸缩盒项目，则该值等效于’center’。在其它情况下，伸缩盒项目则平均分布，并确保两两之间的空白空间相等，同时第一个元素前的空间以及最后一个元素后的空间为其他空白空间的一半。<br><strong>说明：</strong><br>设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。<br>当弹性盒里一行上的所有子元素都不能伸缩或已经达到其最大值时，这一属性可协助对多余的空间进行分配。当元素溢出某行时，这一属性同样会在对齐上进行控制。<br>对应的脚本特性为justifyContent。<br><br>### align-items<br><strong>语法：</strong><br>align-items：flex-start | flex-end | center | baseline | stretch<br><br>默认值：stretch<br><br>适用于：flex容器<br><br>继承性：无<br><br>动画性：是<br><br>计算值：指定值<br><br><strong>取值：</strong><br>flex-start：<br>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。<br>flex-end：<br>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。<br>center：<br>弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。<br>baseline：<br>如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。<br>stretch：<br>如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。<br><strong>说明：</strong><br>定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。<br>对应的脚本特性为alignItems。<br><br>### align-content<br><strong>语法：</strong><br>align-content：flex-start | flex-end | center | space-between | space-around | stretch<br><br>默认值：stretch<br><br>适用于：多行的弹性盒模型容器<br><br>继承性：无<br><br>动画性：是<br><br>计算值：指定值<br><br><strong>取值：</strong><br>flex-start：<br>各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行。<br>flex-end：<br>各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行。<br>center：<br>各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等。（如果剩下的空间是负数，则各行会向两个方向溢出的相等距离。）<br>space-between：<br>各行在弹性盒容器中平均分布。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于’flex-start’。在其它情况下，第一行的侧轴起始边界紧靠住弹性盒容器的侧轴起始内容边界，最后一行的侧轴结束边界紧靠住弹性盒容器的侧轴结束内容边界，剩余的行则按一定方式在弹性盒窗口中排列，以保持两两之间的空间相等。<br>space-around：<br>各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于’center’。在其它情况下，各行会按一定方式在弹性盒容器中排列，以保持两两之间的空间相等，同时第一行前面及最后一行后面的空间是其他空间的一半。<br>stretch：<br>各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于’flex-start’。在其它情况下，剩余空间被所有行平分，以扩大它们的侧轴尺寸。<br><strong>说明：</strong><br>当伸缩容器的侧轴还有多余空间时，本属性可以用来调准「伸缩行」在伸缩容器里的对齐方式，这与调准伸缩项目在主轴上对齐方式的 &lt;’ justify-content ‘&gt; 属性类似。请注意本属性在只有一行的伸缩容器上没有效果。<br>对应的脚本特性为alignContent。<br><br>### align-self<br><strong>语法：</strong><br>align-self：auto | flex-start | flex-end | center | baseline | stretch<br><br>默认值：auto<br><br>适用于：flex子项<br><br>继承性：无<br><br>动画性：是<br><br>计算值：如果值为「auto」，则计算值为父元素的 &lt;’ align-items ‘&gt; 值，否则为指定值。<br><br><strong>取值：</strong><br>auto：<br>如果’align-self’的值为’auto’，则其计算值为元素的父元素的’align-items’值，如果其没有父元素，则计算值为’stretch’。<br>flex-start：<br>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。<br>flex-end：<br>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。<br>center：<br>弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。<br>baseline：<br>如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。<br>stretch：<br>如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。<br><strong>说明：</strong><br>定义flex子项单独在侧轴（纵轴）方向上的对齐方式。<br>对应的脚本特性为alignSelf。<br><br>### flex<br><strong>语法：</strong><br>flex：none | &lt;’ flex-grow ‘&gt; &lt;’ flex-shrink &gt;’? || &lt;’ flex-basis ‘&gt;<br><br>默认值：看各分拆属性<br><br>适用于：flex子项<br><br>继承性：无<br><br>动画性：否<br><br>计算值：看各分拆属性<br><br><strong>取值：</strong><br>none：<br>none关键字的计算值为: 0 0 auto<br>&lt;’ flex-grow ‘&gt;：<br>用来指定扩展比率，即剩余空间是正值时此「flex子项」相对于「flex容器」里其他「flex子项」能分配到空间比例。<br>在「flex」属性中该值如果被省略则默认为「0」<br>&lt;’ flex-shrink ‘&gt;：<br>用来指定收缩比率，即剩余空间是负值时此「flex子项」相对于「flex容器」里其他「flex子项」能收缩的空间比例。<br>在收缩的时候收缩比率会以伸缩基准值加权<br>在「flex」属性中该值如果被省略则默认为「1」<br>&lt;’ flex-basis ‘&gt;：<br>用来指定伸缩基准值，即在根据伸缩比率计算出剩余空间的分布之前，「flex子项」长度的起始数值。<br>在「flex」属性中该值如果被省略则默认为「0%」<br>在「flex」属性中该值如果被指定为「auto」，则伸缩基准值的计算值是自身的 &lt;’ width ‘&gt; 设置，如果自身的宽度没有定义，则长度取决于内容。<br><strong>说明：</strong><br>复合属性。设置或检索弹性盒模型对象的子元素如何分配空间。<br>如果缩写「flex: 1」, 则其计算值为「1 1 0%」<br>如果缩写「flex: auto」, 则其计算值为「1 1 auto」<br>如果「flex: none」, 则其计算值为「0 0 auto」<br>如果「flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值<br><br>示例：如下情况每个元素的计算宽是多少<br><br>    <ul class="flex"><br>        <li>a</li><br>        <li>b</li><br>        <li>c</li><br>    </ul><br><br>    .flex{display:flex;width:800px;margin:0;padding:0;list-style:none;}<br>    .flex :nth-child(1){flex:1 1 300px;}<br>    .flex :nth-child(2){flex:2 2 200px;}<br>    .flex :nth-child(3){flex:3 3 400px;}<br>    本例定义了父容器宽（即主轴宽）为800px，由于子元素设置了伸缩基准值flex-basis，相加300+200+400=900，那么子元素将会溢出900-800=100px；<br>    由于同时设置了收缩因子，所以加权综合可得300<em>1+200</em>2+400<em>3=1900px；<br>    于是我们可以计算a,b,c将被移除的溢出量是多少：<br>    a被移除溢出量：(300</em>1/1900)<em>100，即约等于16px<br>    b被移除溢出量：(200</em>2/1900)<em>100，即约等于21px<br>    c被移除溢出量：(400</em>3/1900)<em>100，即约等于63px<br>    最后a,b,c的实际宽度分别为：300-16=284px, 200-21=179px, 400-63=337px<br><br>仍然是上面这个例子，不过将容器的宽度改成了1500px<br><br><br>    <ul class="flex"><br>        <li>a</li><br>        <li>b</li><br>        <li>c</li><br>    </ul><br><br>    .flex{display:flex;width:1500px;margin:0;padding:0;list-style:none;}<br>    .flex :nth-child(1){flex:1 1 300px;}<br>    .flex :nth-child(2){flex:2 2 200px;}<br>    .flex :nth-child(3){flex:3 3 400px;}<br>    本例定义了父容器宽（即主轴宽）为1500px，由于子元素设置了伸缩基准值flex-basis，相加300+200+400=900，那么容器将有1500-900=600px的剩余宽度；<br>    于是我们可以计算a,b,c将被扩展量是多少：<br>    a的扩展量：(1/(1+2+3))</em>600，即约等于100px<br>    b的扩展量：(2/(1+2+3))<em>600，即约等于200px<br>    c的扩展量：(3/(1+2+3))</em>600，即约等于300px<br>    最后a,b,c的实际宽度分别为：300+100=400px, 200+200=400px, 400+300=700px<br>    从本例能看出：<br>    当「flex-basis」在「flex」属性中不为0时（包括值为auto，此时伸缩基准值等于自身内容宽度），「flex子项」将分配容器的剩余空间（剩余空间即等于容器宽度减去各项的伸缩基准值）<br><br>    当「flex-basis」在「flex」属性中等于0时，「flex子项」将分配容器的所有空间（因为各项的伸缩基准值相加等于0，剩余空间等于容器宽度减去各项的伸缩基准值，即减0，最后剩余空间值等于容器宽度），所以可以借助此特性，给各子项定义「flex: n」来进行按比例均分容器总宽度<br><br>对应的脚本特性为flex。<br><br>### flex-basis<br><strong>语法：</strong><br>flex-basis：length | percentage | auto | content<br><br>默认值：auto<br><br>适用于：flex子项<br><br>继承性：无<br><br>动画性：是，当值为非关键字时<br><br>计算值：指定值<br><br><strong>取值：</strong><br>length：<br>用长度值来定义宽度。不允许负值<br>percentage：<br>用百分比来定义宽度。不允许负值<br>auto：<br>无特定宽度值，取决于其它属性值<br>content：<br>基于内容自动计算宽度<br><strong>说明：</strong><br>设置或检索弹性盒伸缩基准值。<br>如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间<br>对应的脚本特性为flexBasis。<br><br>### flex-grow<br><strong>语法：</strong><br>flex-grow：number<br><br>默认值：0<br><br>适用于：flex子项<br><br>继承性：无<br><br>动画性：是<br><br>计算值：指定值<br><br><strong>取值：</strong><br>number：<br>用数值来定义扩展比率。不允许负值<br>说明：<br>设置或检索弹性盒的扩展比率。<br>根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间。<br>示例：b,c将按照1:3的比率分配剩余空间<br>Code：<br><br>    <ul class="flex"><br>        <li>a</li><br>        <li>b</li><br>        <li>c</li><br>    </ul><br><br>    .flex{display:flex;width:600px;margin:0;padding:0;list-style:none;}<br>    .flex li:nth-child(1){width:200px;}<br>    .flex li:nth-child(2){flex-grow:1;width:50px;}<br>    .flex li:nth-child(3){flex-grow:3;width:50px;}<br>    flex-grow的默认值为0，如果没有显示定义该属性，是不会拥有分配剩余空间权利的。<br><br>    本例中b,c两项都显式的定义了flex-grow，flex容器的剩余空间分成了4份，其中b占1份，c占3分，即1:3<br><br>    flex容器的剩余空间长度为：600-200-50-50=300px，所以最终a,b,c的长度分别为：<br><br>    a: 50+(300/4)=200px<br><br>    b: 50+(300/4<em>1)=125px<br><br>    a: 50+(300/4</em>3)=275px<br><br>对应的脚本特性为flexGrow。<br><br>### flex-shrink<br><strong>语法：</strong><br>flex-shrink：number<br><br>默认值：1<br><br>适用于：flex子项<br><br>继承性：无<br><br>动画性：是<br><br>计算值：指定值<br><br><strong>取值：</strong><br>number：<br>用数值来定义收缩比率。不允许负值<br>说明：<br>设置或检索弹性盒的收缩比率。<br>根据弹性盒子元素所设置的收缩因子作为比率来收缩空间。<br><br>示例：a,b,c将按照1:1:3的比率来收缩空间<br><br>    <ul class="flex"><br>        <li>a</li><br>        <li>b</li><br>        <li>c</li><br>    </ul><br><br>    .flex{display:flex;width:400px;margin:0;padding:0;list-style:none;}<br>    .flex li{width:200px;}<br>    .flex li:nth-child(3){flex-shrink:3;}<br>    flex-shrink的默认值为1，如果没有显示定义该属性，将会自动按照默认值1在所有因子相加之后计算比率来进行空间收缩。<br><br>    本例中c显式的定义了flex-shrink，a,b没有显式定义，但将根据默认值1来计算，可以看到总共将剩余空间分成了5份，其中a占1份，b占1份，c占3分，即1:1:3<br><br>    我们可以看到父容器定义为400px，子项被定义为200px，相加之后即为600px，超出父容器200px。那么这么超出的200px需要被a,b,c消化<br><br>    通过收缩因子，所以加权综合可得200<em>1+200</em>1+200<em>3=1000px；<br>    于是我们可以计算a,b,c将被移除的溢出量是多少：<br>    a被移除溢出量：(200</em>1/1000)<em>200，即约等于40px<br>    b被移除溢出量：(200</em>1/1000)<em>200，即约等于40px<br>    c被移除溢出量：(200</em>3/1000)<em>200，即约等于120px<br>    最后a,b,c的实际宽度分别为：200-40=160px, 200-40=160px, 200-120=80px<br><br>对应的脚本特性为flexGrow。<br><br>### order<br><strong>语法：</strong><br>order：integer<br><br>默认值：0<br><br>适用于：flex子项和flex容器中的绝对定位子元素<br><br>继承性：无<br><br>动画性：是<br><br>计算值：指定值<br><br><strong>取值：</strong><br>number：<br>用整数值来定义排列顺序，数值小的排在前面。可以为负值。<br>说明：<br>设置或检索弹性盒模型对象的子元素出現的順序。<br>order定义将会影响 &lt;’ position ‘&gt; 值为static元素的层叠级别，数值小的会被数值大的盖住。<br><br>    .test {<br>        display: flex;<br>    }<br>    .item2 {<br>        order: -1;<br>        margin: -30px;<br>    }<br><br>    <div class="test"><br>        <p class="item1">flex item1</p><br>        <p class="item2">flex item2</p><br>    </div><br>    此时，item1将会盖在item2之上<br><br>对应的脚本特性为order。<br><br><br><br>### 记忆<br>先记flex-flow，它的flex-direction 控制哪条是主轴以及主轴的方向；它的flex-wrap控制侧轴的方向，nowrap值为没有侧轴。<br>然后记四个管理富裕空间的属性。justify-content是管理主轴的富裕空间。align-content、align-items是管理侧轴的富裕空间，不同点是align-content是多行侧轴富裕空间的管理（把多行看成一个整体）而align-items是单行的富裕空间管理，align-self是子项管理自身在侧轴（纵轴）方向上的对齐方式。三个侧轴管理的属性优先级是多行情况下align-content&gt;align-self,单行情况下align-self&gt;align-items。<br>然后记flex属性，它的三个属性都是管理伸缩规则。<br>最后记order管理item出現的順序。<br><a href="http://flexboxfroggy.com/" target="_blank" rel="noopener">flex在线练习</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">再不懂可以参考阮一峰老师的教程</a><br><br># 选择器<br><table class="tab2"><br><thead><br><tr><br><th>选择器</th><br><th>例</th><br><th>对于例的说明</th><br><th>css</th><br></tr><br></thead><br><tbody><br><tr><td colspan="4" style="color:red;text-align:center">基本选择器</td></tr><br><tr><br><td><a href="all-element.php"></a></td></tr></tbody></table></em><br><td><em></em></td><br><td>所有元素的选择器，通用选择器</td><br><td>2</td><br><br><tr><br><td><a href="element.php">元素</a></td><br><td>h1</td><br><td>p元素的选择器，元素选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="class.php" target="_blank">.类</a></td><br><td>.sample</td><br><td>使用class=”sample”包含的所有元素，类选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="id.php" target="_blank">#id</a></td><br><td>#firstname</td><br><td>使用id=”firstname”包含的所有元素，ID选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="elements.php" target="_blank">element,element</a></td><br><td>div,p</td><br><td>div元素与p元素的选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="element-child.php" target="_blank">element element</a></td><br><td>div p</td><br><td>div元素选择器中p元素的选择器。后代选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="parent-element.php" target="_blank">element&gt;element</a></td><br><td>div&gt;p</td><br><td>母元素div的直接子元素p元素的选择器。直接后代选择器,此类选择器只能匹配到直接后代，不能匹配到深层次的后代元素</td><br><td>2</td><br></tr><br><tr><br><td><a href="element-im-after.php" target="_blank">element+element</a></td><br><td>div+p</td><br><td>紧接div元素其后的p元素选择器。</td><br><td>2</td><br></tr><br><tr><br><td><a href="element-after.php" target="_blank">element1~element2</a></td><br><td>p ~ ul</td><br><td>相同母元素中，p元素后面出现的ul元素所适用的选择器。</td><br><td>3</td><br></tr><br><tr><td colspan="4" style="color:red;text-align:center">属性选择器</td></tr><br><tr><br><td><a href="attribute.php" target="_blank">[属性]</a></td><br><td>h1[title]</td><br><td>带有title属性的元素h1元素的选择器。属性选择器</td><br><td>2</td><br></tr><br><tr><br><td><a href="attribute-same.php" target="_blank">[属性=值]</a></td><br><td>h1[target=_blank]</td><br><td>带有target属性且其值为”_blank”的元素的选择器。属性选择器</td><br><td>2</td><br></tr><br><tr><br><td><a href="attribute-multi.php" target="_blank">[属性~=值]</a></td><br><td>h1[title~=example]</td><br><td>带有的title属性的值有多个，其中含有example值的h1元素的选择器。换句话说：属性值为一用空格分隔的字词列表，其中一个等于example元素（包含只有一个值且该值等于example的情况）。属性选择器。</td><br><td>2</td><br></tr><br><tr><br><td><a href="attribute-lang.php" target="_blank">[属性|=值]</a></td><br><td>h1[lang|=en]</td><br><td>带有的lang属性的值中以en为开头的h1元素的选择器。如lang属性的值带有[en]、[en-US]、[en-cockney]的，都在其中。换句话说：选择具有lang属性且属性值为以en开头并用连接符”-“分隔的字符串的元素，如果属性值仅为en，也将被选择。属性选择器</td><br><td>2</td><br></tr><br><tr><br><td><a href="attribute-first.php" target="_blank">[属性^=值]</a></td><br><td>a[href^=”https”]</td><br><td>带有的href属性的值以https为开头的a元素的选择器。属性选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="attribute-last.php" target="_blank">[属性$=值]</a></td><br><td>a[href$=”.pdf”]</td><br><td>带有的href属性的值以pdf结束的a元素的选择器。属性选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="attribute-part.php" target="_blank">[属性=值]</a></td><br><td>a[href*=”webkkl”]</td><br><td>带有的href属性的值中包含有webkkl文字列的a元素的选择器。属性选择器</td><br><td>3</td><br></tr><br><tr><td colspan="4" style="color:red;text-align:center">伪类选择符（选择的是一些状态，这些都不能用DOM结构来表示）</td></tr><br><tr><td colspan="4" style="color:blue;text-align:center">链接伪类</td></tr><br><tr><br><td><a href="active.php" target="_blank">:active</a></td><br><td>a:active</td><br><td>当元素被选中（被点击）时适用的选择器。伪类选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="link.php" target="_blank">:link</a></td><br><td>a:link</td><br><td>没有访问前，带有链接的元素的选择器。伪类选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="link.php" target="_blank">:target</a></td><br><td>target</td><br><td>匹配相关URL指向的元素。<br>解释：URL后面跟锚点#，指向文档内某个具体的元素。这个被链接的元素就是目标元素(target element)，:target选择器用于选取当前活动的目标元素。距离：假设在页面 a.html 中，那么当访问 a.html#demo 时，这个id为demo的div元素将会被:target命中</td><br><td>1</td><br></tr><br><tr><td colspan="4" style="color:blue;text-align:center">动态伪类</td></tr><br><tr><br><td><a href="visited.php" target="_blank">:visited</a></td><br><td>a:visited</td><br><td>访问过后，带有链接的元素的选择器。只有下列的属性才能被应用<br>                        color、<br>                        background-color、<br>                        border-color。伪类选择器</td><br><td>1</td><br></tr><br><tr><br><td><a href="hover.php" target="_blank">:hover</a></td><br><td>a:hover</td><br><td>当鼠标放到元素上时，该当元素适用的选择器。伪类选择器</td><br><td>1</td><br></tr><br><tr><td colspan="4" style="color:blue;text-align:center">表单相关伪类</td></tr><br><tr><br><td><a href="focus.php" target="_blank">:focus</a></td><br><td>a:focus</td><br><td>定位到元素上时，该当元素适用的选择器。伪类选择器</td><br><td>2</td><br></tr><br><tr><br><td><a href="enabled.php" target="_blank">:enabled</a></td><br><td>input:enabled</td><br><td>对有效元素适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="disabled.php" target="_blank">:disabled</a></td><br><td>input:enabled</td><br><td>对无效元素适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="checked.php" target="_blank">:checked</a></td><br><td>input:checked</td><br><td>处于被选择状态的按钮或选框上适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><td colspan="4" style="color:blue;text-align:center">结构性伪类（index的值从1开始计数    除此之外:nth-child和:nth-of-type有一个很重要的区别！！<br>                            nth-of-type以元素为中心！！！，意思是:first-of-type(index)的冒号前面放类名都是无效的，最好写元素名。如果忽略不写那就是父亲元素下面每一种类型的第一个）</td></tr><br><tr><br><td><a href="first-child.php" target="_blank">:first-child</a></td><br><td>p:first-child</td><br><td>指定的元素(这里是p元素)为母元素的最初子元素时适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="last-child.php" target="_blank">:last-child</a></td><br><td>p:last-child</td><br><td>指定的元素(这里是p元素)为母元素的最后子元素时适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="nth-child.php" target="_blank">:nth-child()</a></td><br><td>p:nth-child(n)</td><br><td>相同母元素中第n个子元素(这里是p元素)上适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="nth-last-child.php" target="_blank">:nth-last-child()</a></td><br><td>p:nth-last-child(n)</td><br><td>相同母元素中最后的子元素(这里是p元素)上适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="only-child.php" target="_blank">:only-child</a></td><br><td>p:only-child</td><br><td>指定的元素(这里是p元素)是母元素中唯一的子元素时，适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="first-of-type.php" target="_blank">:first-of-type</a></td><br><td>p:first-of-type</td><br><td>相同母元素中，指定的元素(这里是p元素)的第一个上适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="last-of-type.php" target="_blank">:last-of-type</a></td><br><td>p:last-of-type</td><br><td>相同母元素中，在指定的元素(这里是p元素)中，对最后一个所适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="nth-of-type.php" target="_blank">:nth-of-type()</a></td><br><td>p:nth-of-type(n)</td><br><td>相同母元素中被指定的相同子元素(这里是p元素)的第n个上适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="nth-last-of-type.php" target="_blank">:nth-last-of-type()</a></td><br><td>p:nth-last-of-type(n)</td><br><td>相同母元素中被指定的相同子元素(这里是p元素)的倒数第n个上适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="only-of-type.php" target="_blank">:only-of-type</a></td><br><td>p:only-of-type</td><br><td>指定的元素(这里是p元素)是母元素中该种类型的唯一子元素时，适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="empty.php" target="_blank">:empty</a></td><br><td>td:empty</td><br><td>当元素(这里是td元素)中没有子元素、元素内容时适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><br><td><a href="not.php" target="_blank">:not()</a></td><br><td>:not(.sample)</td><br><td>当不是指定的元素/选择器（这里是.sample）时，适用的选择器。伪类选择器</td><br><td>3</td><br></tr><br><tr><td colspan="4" style="color:red;text-align:center">伪元素选择符（选择的是不在DOM树上的结构）</td></tr><br><tr><br><td><a href="before.php" target="_blank">::before</a></td><br><td>p::before</td><br><td>p元素之前生成、插入的内容适用的选择器。伪元素</td><br><td>2</td><br></tr><br><tr><br><td><a href="after.php" target="_blank">::after</a></td><br><td>p::after</td><br><td>紧跟p元素之后生成、插入的内容适用的选择器。伪元素</td><br><td>2</td><br></tr><br><tr><br><td><a href="first-line.php" target="_blank">::first-line</a></td><br><td>p::first-line</td><br><td>指定的p元素的最初一行适用的选择器。伪元素</td><br><td>2</td><br></tr><br><tr><br><td><a href="first-letter.php" target="_blank">::first-letter</a></td><br><td>p::firset-letter</td><br><td>指定的p元素的最初一文字适用的选择器。伪元素</td><br><td>2</td><br></tr><br><tr><br><td><a href="selection.php" target="_blank">::selection</a></td><br><td>::selection</td><br><td>适用于选择结果上的选择器。伪元素</td><br><td>3</td><br></tr><br><br><h1 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h1><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src="media/h.gif"></p><h2 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h2><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="media/wxx.jpg"></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h1 id="HTML5新标签与特性"><a href="#HTML5新标签与特性" class="headerlink" title="HTML5新标签与特性"></a>HTML5新标签与特性</h1><p>兼容性问题  （ie9 以上的版本） </p><p><img src="media/html.jpg"></p><h2 id="文档类型设定"><a href="#文档类型设定" class="headerlink" title="文档类型设定"></a>文档类型设定</h2><ul><li>document<ul><li>HTML:        sublime 输入  html:4s</li><li>XHTML:      sublime 输入  html:xt</li><li>HTML5        sublime 输入  html:5       &lt;!DOCTYPE html&gt;</li></ul></li></ul><h2 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h2><ul><li><meta http-equiv="charset" content="utf-8">：HTML与XHTML中建议这样去写</li><li><meta charset="utf-8">：HTML5的标签中建议这样去写</li></ul><h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><p> w3c  手册中文官网     :   <a href="http://w3school.com.cn/" target="_blank" rel="noopener">http://w3school.com.cn/</a></p><ul><li><p>header：定义文档的页眉 头部</p></li><li><p>nav：定义导航链接的部分</p></li><li><p>footer：定义文档或节的页脚 底部</p></li><li><p>article：定义文章。</p></li><li><p>section：定义文档中的节（section、区段）</p></li><li><p>aside：定义其所处内容之外的内容 侧边</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span> 语义 :定义页面的头部  页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>  语义 :定义导航栏 <span class="tag">&lt;/<span class="name">nav</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> 语义: 定义 页面底部 页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span> 语义:  定义文章<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> 语义： 定义区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> 语义： 定义其所处内容之外的内容 侧边<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>datalist   标签定义选项列表。请与 input 元素配合使用该元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"请输入明星"</span> <span class="attr">list</span>=<span class="string">"star"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"刘德华"</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"刘若英"</span>&gt;</span>刘若英<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"刘晓庆"</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"戚薇"</span>&gt;</span>戚薇<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"戚继光"</span>&gt;</span>戚继光<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>fieldset 元素可将表单内的相关元素分组，打包      legend 搭配使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>  标题</span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    密　码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="新增的input-type属性值："><a href="#新增的input-type属性值：" class="headerlink" title="新增的input type属性值："></a>新增的input type属性值：</h2><table><thead><tr><th><strong>类型<em>**</em></strong></th><th><strong>使用示例<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td><strong>email<em>**</em></strong></td><td><input type="email"></td><td>输入邮箱格式</td></tr><tr><td><strong>tel<em>**</em></strong></td><td><input type="tel"></td><td>输入手机号码格式</td></tr><tr><td><strong>url<em>**</em></strong></td><td><input type="url"></td><td>输入url格式</td></tr><tr><td><strong>number<em>**</em></strong></td><td><input type="number"></td><td>输入数字格式</td></tr><tr><td><strong>search<em>**</em></strong></td><td><input type="search"></td><td>搜索框（体现语义化）</td></tr><tr><td><strong>range<em>**</em></strong></td><td><input type="range"></td><td>自由拖动滑块</td></tr><tr><td><strong>time<em>**</em></strong></td><td><input type="time"></td><td>小时分钟</td></tr><tr><td><strong>date<em>**</em></strong></td><td><input type="date"></td><td>年月日</td></tr><tr><td><strong>datetime<em>**</em></strong></td><td><input type="datetime"></td><td>时间</td></tr><tr><td><strong>month<em>**</em></strong></td><td><input type="month"></td><td>月年</td></tr><tr><td><strong>week<em>**</em></strong></td><td><input type="week"></td><td>星期 年</td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><table><thead><tr><th><strong>属性<em>**</em></strong></th><th><strong>用法<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td><strong>placeholder<em>**</em></strong></td><td><input type="text" placeholder="请输入用户名"></td><td>占位符  当用户输入的时候 里面的文字消失  删除所有文字，自动返回</td></tr><tr><td><strong>autofocus<em>**</em></strong></td><td><input type="text" autofocus></td><td>规定当页面加载时 input 元素应该自动获得焦点</td></tr><tr><td><strong>multiple<em>**</em></strong></td><td><input type="file" multiple></td><td>多文件上传</td></tr><tr><td><strong>autocomplete<em>**</em></strong></td><td><input type="text" autocomplete="off"></td><td>规定表单是否应该启用自动完成功能  有2个值，一个是on 一个是off      on 代表记录已经输入的值  1.autocomplete 首先需要提交按钮 <br>2.这个表单您必须给他名字</td></tr><tr><td><strong>required<em>**</em></strong></td><td><input type="text" required></td><td>必填项  内容不能为空</td></tr><tr><td><strong>accesskey<em>**</em></strong></td><td><input type="text" accesskey="s"></td><td>规定激活（使元素获得焦点）元素的快捷键   采用 alt + s的形式</td></tr></tbody></table><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userPhone"</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"userPhone"</span> <span class="attr">id</span>=<span class="string">"userPhone"</span> <span class="attr">pattern</span>=<span class="string">"^1\d&#123;10&#125;$"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱地址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"collage"</span>&gt;</span>所属学院:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"collage"</span> <span class="attr">id</span>=<span class="string">"collage"</span> <span class="attr">list</span>=<span class="string">"cList"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"cList"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"前端与移动开发学院"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java学院"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"c++学院"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"score"</span>&gt;</span>入学成绩:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"score"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案思密达<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入学生名字"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>所属学院:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请选择学院"</span> <span class="attr">list</span>=<span class="string">"xueyuan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"xueyuan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>java学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>前端学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>php学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>设计学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>出生日期:   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>成绩:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业时间:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inTime"</span>&gt;</span>入学日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">id</span>=<span class="string">"inTime"</span> <span class="attr">name</span>=<span class="string">"inTime"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"leaveTime"</span>&gt;</span>毕业日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">id</span>=<span class="string">"leaveTime"</span> <span class="attr">name</span>=<span class="string">"leaveTime"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul><li>embed：标签定义嵌入的内容</li><li>audio：播放音频</li><li>video：播放视频</li></ul><h3 id="多媒体-embed（会使用）"><a href="#多媒体-embed（会使用）" class="headerlink" title="多媒体 embed（会使用）"></a>多媒体 embed（会使用）</h3><p>embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p><p>因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf"</span> <span class="attr">allowFullScreen</span>=<span class="string">"true"</span> <span class="attr">quality</span>=<span class="string">"high"</span> <span class="attr">width</span>=<span class="string">"480"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">align</span>=<span class="string">"middle"</span> <span class="attr">allowScriptAccess</span>=<span class="string">"always"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p><p> <img src="media/embed.png"></p><p> 优酷，土豆，爱奇艺，腾讯、乐视等等</p><ol><li>先上传   </li><li>在分享</li></ol><h3 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h3><p>HTML5通过<audio>标签来解决音频播放的问题。</audio></p><p>使用相当简单，如下图所示</p><p><img src="media/1498468026526.png" alt="1498468026526"> </p><p>并且可以通过附加属性可以更友好控制音频的播放，如：</p><p>autoplay 自动播放</p><p>controls 是否显不默认播放控件</p><p>loop 循环播放    如果这个属性不写 默认播放一次        loop  或者  loop = “loop”    表示无限循环</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src="media/1498468041058.png" alt="1498468041058"> </p><p>多浏览器支持的方案，如下图</p><p><source> 标签允许您规定可替换的视频/音频文件供浏览器根据它对媒体类型或者编解码器的支持进行选择</p><p><img src="media/1498468052965.png" alt="1498468052965"> </p><h3 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h3><p>HTML5通过<audio>标签来解决音频播放的问题。</audio></p><p>同音频播放一样，<video>使用也相当简单，如下图</video></p><p><img src="media/1498468072194.png" alt="1498468072194"> </p><p>同样，通过附加属性可以更友好的控制视频的播放</p><p>autoplay 自动播放</p><p>controls 是否显示默认播放控件</p><p>loop 循环播放</p><p>width 设置播放窗口宽度</p><p>height 设置播放窗口的高度</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src="media/1498468086199.png" alt="1498468086199"> </p><p><strong>多浏览器支持的方案，如下图<em>**</em></strong></p><h2 id="优雅降级和渐进增强"><a href="#优雅降级和渐进增强" class="headerlink" title="优雅降级和渐进增强"></a>优雅降级和渐进增强</h2><p>什么是渐进增强（progressive enhancement）、优雅降级（graceful degradation）呢？</p><p>渐进增强 progressive enhancement：</p><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p> 类似 爬山，由低出往高处爬</p><p>  <img src="media/pa.png" width="400"></p><p>  <b>优雅降级 graceful degradation：</b></p><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p>类似蹦极，由高处往低处下落</p><p><img src="media/xia.jpg"></p><p>　　区别：渐进增强是向上兼容，优雅降级是向下兼容。</p><p>个人建议： 现在互联网发展很快， 连微软公司都抛弃了ie浏览器，转而支持 edge这样的高版本浏览器，我们很多情况下没有必要再时刻想着低版本浏览器了，而是一开始就构建完整的效果，根据实际情况，修补低版本浏览器问题。</p><h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><p>其参数设置如下：</p><p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p><p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p><p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-image: url('images/gyt.jpg');</span><br><span class="line"><span class="selector-tag">background-size</span>: 300<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* background-size: contain; */</span></span><br><span class="line"><span class="comment">/* background-size: cover; */</span></span><br></pre></td></tr></table></figure><h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p><ul><li>一个元素可以设置多重背景图像。 </li><li>每组属性间使用逗号分隔。 </li><li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li><li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,</span><br><span class="line">   url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,</span><br><span class="line">   url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css学习 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
